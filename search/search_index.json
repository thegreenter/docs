{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Inicio"},{"location":"faq/","text":"Preguntas Frecuentes \u00b6 Facturas \u00b6 Que es el CDR CDR son las siglas de constancia de recepcion y es emitida por sunat indicando que una factura ha sido aceptada o rechazada. Para saber a cual estado pertenece la factura emitida, debemos identificar en que rango de la siguiente tabla se encuentra el codigo de respuesta. Rango Descripci\u00f3n Que hacer 0100 a 1999 Excepciones Corregir y volver a enviar la factura 2000 a 3999 Errores (Rechazo) Emitir una nueva factura >4000 Observaciones Corregir en futuras facturas Resumen diario \u00b6 Como obtener el CDR El proceso del resumen diario se compone de 2 fases, el env\u00edo y la obtenci\u00f3n del CDR; este \u00faltimo no siempre se puede obtener inmediatamente, para ello debemos tener en cuenta el c\u00f3digo que Sunat responde. C\u00f3digo Descripci\u00f3n Estado del CDR 0 Procesado correctamente Disponible 98 En Proceso Volver a consultar 99 Procesado con errores Disponible Enviar Boleta o Resumen diario Desde los inicios de facturaci\u00f3n electr\u00f3nica comunicar a SUNAT sobre las boletas de venta emitidas, debian realizarse por medio de un Resumen diario, actualmente ambas opciones son permitidas 1 , puedes seguir enviando los resumen diario o enviar boletas individualmente como se hace con las facturas. WebService \u00b6 Bad Gateway Este es un error al conectarse con el servicio (Sunat u OSE), y lo unico que se puede hacer es informar al administrador del servicio y esperar. Could not connect to host Este mensaje puede ser resultado de varios casos, entre ellos falta de conectividad a internet, y otro mas recurrente por problemas al validar el certificado SSL del servicio a conectar. Para solucionar esto puede probar una de estas opciones: - Instalar el certificado de sunat en el servidor que se esta usando - En caso de sistemas linux, actualizar ca-certificates - Deshabilitar la verificaci\u00f3n SSL en Ws\\Services\\SoapClient.php <?php $parameters = [ 'stream_context' => stream_context_create ([ 'ssl' => [ 'verify_peer' => false , ], ]), ]; Resoluci\u00f3n N.\u00b0 114 -2019/SUNAT : Art. 12, En caso el emisor electr\u00f3nico opte por enviar a la SUNAT un ejemplar de la boleta de venta electr\u00f3nica y/o de las notas electr\u00f3nicas vinculadas, debe hacerlo hasta en un plazo m\u00e1ximo de cinco d\u00edas calendarios. \u21a9","title":"Preguntas Frecuentes"},{"location":"faq/#preguntas-frecuentes","text":"","title":"Preguntas Frecuentes"},{"location":"faq/#facturas","text":"Que es el CDR CDR son las siglas de constancia de recepcion y es emitida por sunat indicando que una factura ha sido aceptada o rechazada. Para saber a cual estado pertenece la factura emitida, debemos identificar en que rango de la siguiente tabla se encuentra el codigo de respuesta. Rango Descripci\u00f3n Que hacer 0100 a 1999 Excepciones Corregir y volver a enviar la factura 2000 a 3999 Errores (Rechazo) Emitir una nueva factura >4000 Observaciones Corregir en futuras facturas","title":"Facturas"},{"location":"faq/#resumen-diario","text":"Como obtener el CDR El proceso del resumen diario se compone de 2 fases, el env\u00edo y la obtenci\u00f3n del CDR; este \u00faltimo no siempre se puede obtener inmediatamente, para ello debemos tener en cuenta el c\u00f3digo que Sunat responde. C\u00f3digo Descripci\u00f3n Estado del CDR 0 Procesado correctamente Disponible 98 En Proceso Volver a consultar 99 Procesado con errores Disponible Enviar Boleta o Resumen diario Desde los inicios de facturaci\u00f3n electr\u00f3nica comunicar a SUNAT sobre las boletas de venta emitidas, debian realizarse por medio de un Resumen diario, actualmente ambas opciones son permitidas 1 , puedes seguir enviando los resumen diario o enviar boletas individualmente como se hace con las facturas.","title":"Resumen diario"},{"location":"faq/#webservice","text":"Bad Gateway Este es un error al conectarse con el servicio (Sunat u OSE), y lo unico que se puede hacer es informar al administrador del servicio y esperar. Could not connect to host Este mensaje puede ser resultado de varios casos, entre ellos falta de conectividad a internet, y otro mas recurrente por problemas al validar el certificado SSL del servicio a conectar. Para solucionar esto puede probar una de estas opciones: - Instalar el certificado de sunat en el servidor que se esta usando - En caso de sistemas linux, actualizar ca-certificates - Deshabilitar la verificaci\u00f3n SSL en Ws\\Services\\SoapClient.php <?php $parameters = [ 'stream_context' => stream_context_create ([ 'ssl' => [ 'verify_peer' => false , ], ]), ]; Resoluci\u00f3n N.\u00b0 114 -2019/SUNAT : Art. 12, En caso el emisor electr\u00f3nico opte por enviar a la SUNAT un ejemplar de la boleta de venta electr\u00f3nica y/o de las notas electr\u00f3nicas vinculadas, debe hacerlo hasta en un plazo m\u00e1ximo de cinco d\u00edas calendarios. \u21a9","title":"WebService"},{"location":"migrate2.1/","text":"Migrar a UBL 2.1 \u00b6 En el archivo composer.json , ajustar la version de greenter/greenter a la version 3.0 . { \"require\" : { \"greenter/greenter\" : \"^3.0\" } } Luego ejecutar composer update greenter/greenter Nuevos Campos \u00b6 El principal cambio para indicar que el comprobante utilize UBL 2.1 , es seteando el campo ublVersion que existe en Invoice y Note . <?php use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\Note ; $invoice = new Invoice (); $invoice -> setUblVersion ( '2.1' ); // .... $note = new Note (); $note -> setUblVersion ( '2.1' ); // ... Ejemplo En el ejemplo de primeros pasos, ver\u00e1 los nuevos campos resaltados en el c\u00f3digo.","title":"Migrar a UBL 2.1"},{"location":"migrate2.1/#migrar-a-ubl-21","text":"En el archivo composer.json , ajustar la version de greenter/greenter a la version 3.0 . { \"require\" : { \"greenter/greenter\" : \"^3.0\" } } Luego ejecutar composer update greenter/greenter","title":"Migrar a UBL 2.1"},{"location":"migrate2.1/#nuevos-campos","text":"El principal cambio para indicar que el comprobante utilize UBL 2.1 , es seteando el campo ublVersion que existe en Invoice y Note . <?php use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\Note ; $invoice = new Invoice (); $invoice -> setUblVersion ( '2.1' ); // .... $note = new Note (); $note -> setUblVersion ( '2.1' ); // ... Ejemplo En el ejemplo de primeros pasos, ver\u00e1 los nuevos campos resaltados en el c\u00f3digo.","title":"Nuevos Campos"},{"location":"production/","text":"Greenter en Producci\u00f3n \u00b6 En esta secci\u00f3n de indican los pasos para convertirse en Emisor Electr\u00f3nico. Pasos \u00b6 Creaci\u00f3n de usuario secundario con los permisos para Facturaci\u00f3n Electr\u00f3nica. Registrar el certificado digital en el portal de SUNAT, en formato .cer (Public key). Greenter requiere el certificado digital en formato .pem (Private & Public Key), si tiene un certificado .pfx puede convertirlo siguiendo esta gu\u00eda . Configurar la url del servicio de Producci\u00f3n (ver Lista de servicios ). <?php use Greenter\\Ws\\Services\\SunatEndpoints ; $see = new \\Greenter\\See (); $see -> setService ( SunatEndpoints :: FE_PRODUCCION ); // Cambiar la url para cuando sea Percepci\u00f3n/Retenci\u00f3n o Gu\u00eda de Remisi\u00f3n. $see -> setCertificate ( file_get_contents ( __DIR__ . '/valid-cer.pem' )); $see -> setClaveSOL ( '20000000001D' , 'NOMBLOI' , 'psdlbmrt' ); Usuario Secundario Despues de crear el usuario secundario, tiene que esperar hasta un plazo de 24 horas para que este activo y pueda usarlo.","title":"Paso a Producci\u00f3n"},{"location":"production/#greenter-en-produccion","text":"En esta secci\u00f3n de indican los pasos para convertirse en Emisor Electr\u00f3nico.","title":"Greenter en Producci\u00f3n"},{"location":"production/#pasos","text":"Creaci\u00f3n de usuario secundario con los permisos para Facturaci\u00f3n Electr\u00f3nica. Registrar el certificado digital en el portal de SUNAT, en formato .cer (Public key). Greenter requiere el certificado digital en formato .pem (Private & Public Key), si tiene un certificado .pfx puede convertirlo siguiendo esta gu\u00eda . Configurar la url del servicio de Producci\u00f3n (ver Lista de servicios ). <?php use Greenter\\Ws\\Services\\SunatEndpoints ; $see = new \\Greenter\\See (); $see -> setService ( SunatEndpoints :: FE_PRODUCCION ); // Cambiar la url para cuando sea Percepci\u00f3n/Retenci\u00f3n o Gu\u00eda de Remisi\u00f3n. $see -> setCertificate ( file_get_contents ( __DIR__ . '/valid-cer.pem' )); $see -> setClaveSOL ( '20000000001D' , 'NOMBLOI' , 'psdlbmrt' ); Usuario Secundario Despues de crear el usuario secundario, tiene que esperar hasta un plazo de 24 horas para que este activo y pueda usarlo.","title":"Pasos"},{"location":"starter/","text":"Empezando con Greenter \u00b6 En este primero ejemplo, veremos el flujo b\u00e1sico del proceso de facturaci\u00f3n electr\u00f3nica, desde la elaboraci\u00f3n del comprobante electr\u00f3nico (archivo XML), la inclusi\u00f3n de la firma digital, y posterior envi\u00f3 a SUNAT, adem\u00e1s de la lectura del CDR 1 . Instalaci\u00f3n \u00b6 La forma mas f\u00e1cil de instalar grenter es utilizando composer . composer require greenter/lite Requerimientos \u00b6 T\u00e9cnico PHP 7.2 o superior Certificado en formato PEM Credenciales Clave SOL Se necesita tener las siguientes extensiones habilitadas en php.ini . extension = soap extension = openssl Bases Para conocer m\u00e1s detalles sobre el proceso de Facturaci\u00f3n Electr\u00f3nica, puede consultar. FE Primer - Gu\u00eda de inicio hecho por Greenter cpe.sunat.gob.pe - P\u00e1gina oficial de SUNAT Configuraci\u00f3n \u00b6 Para firmar nuestro comprobante electr\u00f3nico utilizaremos este certificado de prueba , y para conectarnos a los servicios BETA de SUNAT, usaremos las credenciales Clave SOL por defecto. RUC: 20000000001 Usuario: MODDATOS Contrase\u00f1a: moddatos Crearemos el archivo config.php donde configuraremos el certificado digital, la ruta del servicio y las credenciales (Clave SOL) a utilizar: config.php <?php use Greenter\\Ws\\Services\\SunatEndpoints ; use Greenter\\See ; $see = new See (); $see -> setCertificate ( file_get_contents ( __DIR__ . '/certificate.pem' )); $see -> setService ( SunatEndpoints :: FE_BETA ); $see -> setClaveSOL ( '20000000001' , 'MODDATOS' , 'moddatos' ); return $see ; Certificado .PFX - PKCS#12 Si cuentas con un certificado .p12 \u00f3 .pfx , puedes configurar el certificado con el siguiente c\u00f3digo: <?php use Greenter\\XMLSecLibs\\Certificate\\X509Certificate ; use Greenter\\XMLSecLibs\\Certificate\\X509ContentType ; // ... $pfx = file_get_contents ( 'mycert.pfx' ); $password = 'YOUR-PASSWORD' ; $certificate = new X509Certificate ( $pfx , $password ); $see -> setCertificate ( $certificate -> export ( X509ContentType :: PEM )); // ... Definici\u00f3n del comprobante \u00b6 Para el ejemplo, el comprobante a utilizar ser\u00e1 una factura gravada, con la siguiente definici\u00f3n. La empresa GREEN SAC, identificada con RUC 20123456789; desea emitir su primera factura electr\u00f3nica N\u00b0 F001-1 con la siguiente informaci\u00f3n: Global Numero F001-1 Fecha de Emisi\u00f3n 21/07/2020 Hora de Emisi\u00f3n 13:05 Forma de Pago Contado Moneda Sol (PEN) RUC de Emisor 20123456789 RUC de Receptor 20000000001 Operaciones Gravadas S/ 100.00 Valor Venta S/ 100.00 IGV S/ 18.00 Total Impuestos S/ 18.00 Importe Total S/ 118.00 Detalle Codigo P001 Descripc\u00edon Tijeras Unidad de Medida Unidad (NIU) Cantidad 2 Valor unitario S/ 50.00 Valor venta S/ 100.00 Tipo de afectaci\u00f3n IGV Gravado (10) IGV S/ 18.00 Total Impuestos S/ 18.00 Precio unitario S/ 59.00 Factura Electr\u00f3nica \u00b6 Crearemos nuestra primera factura electr\u00f3nica siguiendo el est\u00e1ndar UBL 2.1 , en nuevo archivo factura.php agregaremos el siguiente c\u00f3digo: factura.php <?php use Greenter\\Model\\Client\\Client ; use Greenter\\Model\\Company\\Company ; use Greenter\\Model\\Company\\Address ; use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoContado ; use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\SaleDetail ; use Greenter\\Model\\Sale\\Legend ; require __DIR__ . '/vendor/autoload.php' ; $see = require __DIR__ . '/config.php' ; // Cliente $client = ( new Client ()) -> setTipoDoc ( '6' ) -> setNumDoc ( '20000000001' ) -> setRznSocial ( 'EMPRESA X' ); // Emisor $address = ( new Address ()) -> setUbigueo ( '150101' ) -> setDepartamento ( 'LIMA' ) -> setProvincia ( 'LIMA' ) -> setDistrito ( 'LIMA' ) -> setUrbanizacion ( '-' ) -> setDireccion ( 'Av. Villa Nueva 221' ) -> setCodLocal ( '0000' ); // Codigo de establecimiento asignado por SUNAT, 0000 por defecto. $company = ( new Company ()) -> setRuc ( '20123456789' ) -> setRazonSocial ( 'GREEN SAC' ) -> setNombreComercial ( 'GREEN' ) -> setAddress ( $address ); // Venta $invoice = ( new Invoice ()) -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '0101' ) // Venta - Catalog. 51 -> setTipoDoc ( '01' ) // Factura - Catalog. 01 -> setSerie ( 'F001' ) -> setCorrelativo ( '1' ) -> setFechaEmision ( new DateTime ( '2020-08-24 13:05:00-05:00' )) // Zona horaria: Lima -> setFormaPago ( new FormaPagoContado ()) // FormaPago: Contado -> setTipoMoneda ( 'PEN' ) // Sol - Catalog. 02 -> setCompany ( $company ) -> setClient ( $client ) -> setMtoOperGravadas ( 100.00 ) -> setMtoIGV ( 18.00 ) -> setTotalImpuestos ( 18.00 ) -> setValorVenta ( 100.00 ) -> setSubTotal ( 118.00 ) -> setMtoImpVenta ( 118.00 ) ; $item = ( new SaleDetail ()) -> setCodProducto ( 'P001' ) -> setUnidad ( 'NIU' ) // Unidad - Catalog. 03 -> setCantidad ( 2 ) -> setMtoValorUnitario ( 50.00 ) -> setDescripcion ( 'PRODUCTO 1' ) -> setMtoBaseIgv ( 100 ) -> setPorcentajeIgv ( 18.00 ) // 18% -> setIgv ( 18.00 ) -> setTipAfeIgv ( '10' ) // Gravado Op. Onerosa - Catalog. 07 -> setTotalImpuestos ( 18.00 ) // Suma de impuestos en el detalle -> setMtoValorVenta ( 100.00 ) -> setMtoPrecioUnitario ( 59.00 ) ; $legend = ( new Legend ()) -> setCode ( '1000' ) // Monto en letras - Catalog. 52 -> setValue ( 'SON DOSCIENTOS TREINTA Y SEIS CON 00/100 SOLES' ); $invoice -> setDetails ([ $item ]) -> setLegends ([ $legend ]); Los cat\u00e1logos que se mencionan en los comentarios del c\u00f3digo se encuentran en la Reglas de Validaciones de SUNAT , puedes obtener la \u00faltima versi\u00f3n en la p\u00e1gina oficial de SUNAT . Env\u00edo a SUNAT \u00b6 En el mismo archivo factura.php agregaremos el c\u00f3digo de abajo, el m\u00e9todo send envuelve varios procesos en si, primero genera el XML, lo firma digitalmente, lo env\u00eda al servici\u00f3 de SUNAT y procesa la respuesta (CDR). <?php $result = $see -> send ( $invoice ); // Guardar XML firmado digitalmente. file_put_contents ( $invoice -> getName () . '.xml' , $see -> getFactory () -> getLastXml ()); // Verificamos que la conexi\u00f3n con SUNAT fue exitosa. if ( ! $result -> isSuccess ()) { // Mostrar error al conectarse a SUNAT. echo 'Codigo Error: ' . $result -> getError () -> getCode (); echo 'Mensaje Error: ' . $result -> getError () -> getMessage (); exit (); } // Guardamos el CDR file_put_contents ( 'R-' . $invoice -> getName () . '.zip' , $result -> getCdrZip ()); Para saber como actuar seg\u00fan el c\u00f3digo de error que SUNAT devuelve, es muy importante revisar las Reglas de Validaci\u00f3n , all\u00ed encontraremos todas las validaciones que SUNAT aplica a los diferentes comprobantes electr\u00f3nicos disponibles, adem\u00e1s de lista de cat\u00e1logos y la lista completa de codigos de error. Lectura del CDR \u00b6 Finalmente para saber si nuestro comprobante fue procesado correctamente y ha sido aceptado por SUNAT, necesitamos leer la informac\u00edon contenida en el CDR 1 . <?php /* * file: factura.php */ $cdr = $result -> getCdrResponse (); $code = ( int ) $cdr -> getCode (); if ( $code === 0 ) { echo 'ESTADO: ACEPTADA' . PHP_EOL ; if ( count ( $cdr -> getNotes ()) > 0 ) { echo 'OBSERVACIONES:' . PHP_EOL ; // Corregir estas observaciones en siguientes emisiones. var_dump ( $cdr -> getNotes ()); } } else if ( $code >= 2000 && $code <= 3999 ) { echo 'ESTADO: RECHAZADA' . PHP_EOL ; } else { /* Esto no deber\u00eda darse, pero si ocurre, es un CDR inv\u00e1lido que deber\u00eda tratarse como un error-excepci\u00f3n. */ /*code: 0100 a 1999 */ echo 'Excepci\u00f3n' ; } echo $cdr -> getDescription () . PHP_EOL ; M\u00e1s detalles sobre que hacer si una factura fue observada o rechazada, aqu\u00ed . Ejecutar \u00b6 Finalmente ejecutaremos el script desde la linea de comandos. php factura.php y si todo sale bien obtendremos como respuesta. Exito! ESTADO: ACEPTADA La Factura numero F001-1, ha sido aceptada Estructura finald del proyecto de ejemplo: / \u251c\u2500\u2500 vendor/ \u251c\u2500\u2500 certificate.pem \u251c\u2500\u2500 composer.json \u251c\u2500\u2500 config.php \u251c\u2500\u2500 factura.php \u251c\u2500\u2500 20123456789-01-F001-1.xml \u251c\u2500\u2500 R-20123456789-01-F001-1.zip Este ejemplo puedes encontrarlo en @thegreenter/firststeps . \u00bfQue sigue? \u00b6 Detalles de uso de greenter Ejemplos de comprobantes electr\u00f3nicos Revisar los paquetes que componen greenter Comentarios \u00b6 Pueden unirse a \ud83d\udc4b Greenter Community . Comprobante de Recepci\u00f3n (CDR), es un archivo xml que contiene la respuesta de SUNAT, al env\u00edo previo de un comprobante electr\u00f3nico, en ella se indica si un comprobante ha sido aceptado, aceptado con observaciones o rechazado. \u21a9 \u21a9","title":"Guia de Inicio"},{"location":"starter/#empezando-con-greenter","text":"En este primero ejemplo, veremos el flujo b\u00e1sico del proceso de facturaci\u00f3n electr\u00f3nica, desde la elaboraci\u00f3n del comprobante electr\u00f3nico (archivo XML), la inclusi\u00f3n de la firma digital, y posterior envi\u00f3 a SUNAT, adem\u00e1s de la lectura del CDR 1 .","title":"Empezando con Greenter"},{"location":"starter/#instalacion","text":"La forma mas f\u00e1cil de instalar grenter es utilizando composer . composer require greenter/lite","title":"Instalaci\u00f3n"},{"location":"starter/#requerimientos","text":"T\u00e9cnico PHP 7.2 o superior Certificado en formato PEM Credenciales Clave SOL Se necesita tener las siguientes extensiones habilitadas en php.ini . extension = soap extension = openssl Bases Para conocer m\u00e1s detalles sobre el proceso de Facturaci\u00f3n Electr\u00f3nica, puede consultar. FE Primer - Gu\u00eda de inicio hecho por Greenter cpe.sunat.gob.pe - P\u00e1gina oficial de SUNAT","title":"Requerimientos"},{"location":"starter/#configuracion","text":"Para firmar nuestro comprobante electr\u00f3nico utilizaremos este certificado de prueba , y para conectarnos a los servicios BETA de SUNAT, usaremos las credenciales Clave SOL por defecto. RUC: 20000000001 Usuario: MODDATOS Contrase\u00f1a: moddatos Crearemos el archivo config.php donde configuraremos el certificado digital, la ruta del servicio y las credenciales (Clave SOL) a utilizar: config.php <?php use Greenter\\Ws\\Services\\SunatEndpoints ; use Greenter\\See ; $see = new See (); $see -> setCertificate ( file_get_contents ( __DIR__ . '/certificate.pem' )); $see -> setService ( SunatEndpoints :: FE_BETA ); $see -> setClaveSOL ( '20000000001' , 'MODDATOS' , 'moddatos' ); return $see ; Certificado .PFX - PKCS#12 Si cuentas con un certificado .p12 \u00f3 .pfx , puedes configurar el certificado con el siguiente c\u00f3digo: <?php use Greenter\\XMLSecLibs\\Certificate\\X509Certificate ; use Greenter\\XMLSecLibs\\Certificate\\X509ContentType ; // ... $pfx = file_get_contents ( 'mycert.pfx' ); $password = 'YOUR-PASSWORD' ; $certificate = new X509Certificate ( $pfx , $password ); $see -> setCertificate ( $certificate -> export ( X509ContentType :: PEM )); // ...","title":"Configuraci\u00f3n"},{"location":"starter/#definicion-del-comprobante","text":"Para el ejemplo, el comprobante a utilizar ser\u00e1 una factura gravada, con la siguiente definici\u00f3n. La empresa GREEN SAC, identificada con RUC 20123456789; desea emitir su primera factura electr\u00f3nica N\u00b0 F001-1 con la siguiente informaci\u00f3n: Global Numero F001-1 Fecha de Emisi\u00f3n 21/07/2020 Hora de Emisi\u00f3n 13:05 Forma de Pago Contado Moneda Sol (PEN) RUC de Emisor 20123456789 RUC de Receptor 20000000001 Operaciones Gravadas S/ 100.00 Valor Venta S/ 100.00 IGV S/ 18.00 Total Impuestos S/ 18.00 Importe Total S/ 118.00 Detalle Codigo P001 Descripc\u00edon Tijeras Unidad de Medida Unidad (NIU) Cantidad 2 Valor unitario S/ 50.00 Valor venta S/ 100.00 Tipo de afectaci\u00f3n IGV Gravado (10) IGV S/ 18.00 Total Impuestos S/ 18.00 Precio unitario S/ 59.00","title":"Definici\u00f3n del comprobante"},{"location":"starter/#factura-electronica","text":"Crearemos nuestra primera factura electr\u00f3nica siguiendo el est\u00e1ndar UBL 2.1 , en nuevo archivo factura.php agregaremos el siguiente c\u00f3digo: factura.php <?php use Greenter\\Model\\Client\\Client ; use Greenter\\Model\\Company\\Company ; use Greenter\\Model\\Company\\Address ; use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoContado ; use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\SaleDetail ; use Greenter\\Model\\Sale\\Legend ; require __DIR__ . '/vendor/autoload.php' ; $see = require __DIR__ . '/config.php' ; // Cliente $client = ( new Client ()) -> setTipoDoc ( '6' ) -> setNumDoc ( '20000000001' ) -> setRznSocial ( 'EMPRESA X' ); // Emisor $address = ( new Address ()) -> setUbigueo ( '150101' ) -> setDepartamento ( 'LIMA' ) -> setProvincia ( 'LIMA' ) -> setDistrito ( 'LIMA' ) -> setUrbanizacion ( '-' ) -> setDireccion ( 'Av. Villa Nueva 221' ) -> setCodLocal ( '0000' ); // Codigo de establecimiento asignado por SUNAT, 0000 por defecto. $company = ( new Company ()) -> setRuc ( '20123456789' ) -> setRazonSocial ( 'GREEN SAC' ) -> setNombreComercial ( 'GREEN' ) -> setAddress ( $address ); // Venta $invoice = ( new Invoice ()) -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '0101' ) // Venta - Catalog. 51 -> setTipoDoc ( '01' ) // Factura - Catalog. 01 -> setSerie ( 'F001' ) -> setCorrelativo ( '1' ) -> setFechaEmision ( new DateTime ( '2020-08-24 13:05:00-05:00' )) // Zona horaria: Lima -> setFormaPago ( new FormaPagoContado ()) // FormaPago: Contado -> setTipoMoneda ( 'PEN' ) // Sol - Catalog. 02 -> setCompany ( $company ) -> setClient ( $client ) -> setMtoOperGravadas ( 100.00 ) -> setMtoIGV ( 18.00 ) -> setTotalImpuestos ( 18.00 ) -> setValorVenta ( 100.00 ) -> setSubTotal ( 118.00 ) -> setMtoImpVenta ( 118.00 ) ; $item = ( new SaleDetail ()) -> setCodProducto ( 'P001' ) -> setUnidad ( 'NIU' ) // Unidad - Catalog. 03 -> setCantidad ( 2 ) -> setMtoValorUnitario ( 50.00 ) -> setDescripcion ( 'PRODUCTO 1' ) -> setMtoBaseIgv ( 100 ) -> setPorcentajeIgv ( 18.00 ) // 18% -> setIgv ( 18.00 ) -> setTipAfeIgv ( '10' ) // Gravado Op. Onerosa - Catalog. 07 -> setTotalImpuestos ( 18.00 ) // Suma de impuestos en el detalle -> setMtoValorVenta ( 100.00 ) -> setMtoPrecioUnitario ( 59.00 ) ; $legend = ( new Legend ()) -> setCode ( '1000' ) // Monto en letras - Catalog. 52 -> setValue ( 'SON DOSCIENTOS TREINTA Y SEIS CON 00/100 SOLES' ); $invoice -> setDetails ([ $item ]) -> setLegends ([ $legend ]); Los cat\u00e1logos que se mencionan en los comentarios del c\u00f3digo se encuentran en la Reglas de Validaciones de SUNAT , puedes obtener la \u00faltima versi\u00f3n en la p\u00e1gina oficial de SUNAT .","title":"Factura Electr\u00f3nica"},{"location":"starter/#envio-a-sunat","text":"En el mismo archivo factura.php agregaremos el c\u00f3digo de abajo, el m\u00e9todo send envuelve varios procesos en si, primero genera el XML, lo firma digitalmente, lo env\u00eda al servici\u00f3 de SUNAT y procesa la respuesta (CDR). <?php $result = $see -> send ( $invoice ); // Guardar XML firmado digitalmente. file_put_contents ( $invoice -> getName () . '.xml' , $see -> getFactory () -> getLastXml ()); // Verificamos que la conexi\u00f3n con SUNAT fue exitosa. if ( ! $result -> isSuccess ()) { // Mostrar error al conectarse a SUNAT. echo 'Codigo Error: ' . $result -> getError () -> getCode (); echo 'Mensaje Error: ' . $result -> getError () -> getMessage (); exit (); } // Guardamos el CDR file_put_contents ( 'R-' . $invoice -> getName () . '.zip' , $result -> getCdrZip ()); Para saber como actuar seg\u00fan el c\u00f3digo de error que SUNAT devuelve, es muy importante revisar las Reglas de Validaci\u00f3n , all\u00ed encontraremos todas las validaciones que SUNAT aplica a los diferentes comprobantes electr\u00f3nicos disponibles, adem\u00e1s de lista de cat\u00e1logos y la lista completa de codigos de error.","title":"Env\u00edo a SUNAT"},{"location":"starter/#lectura-del-cdr","text":"Finalmente para saber si nuestro comprobante fue procesado correctamente y ha sido aceptado por SUNAT, necesitamos leer la informac\u00edon contenida en el CDR 1 . <?php /* * file: factura.php */ $cdr = $result -> getCdrResponse (); $code = ( int ) $cdr -> getCode (); if ( $code === 0 ) { echo 'ESTADO: ACEPTADA' . PHP_EOL ; if ( count ( $cdr -> getNotes ()) > 0 ) { echo 'OBSERVACIONES:' . PHP_EOL ; // Corregir estas observaciones en siguientes emisiones. var_dump ( $cdr -> getNotes ()); } } else if ( $code >= 2000 && $code <= 3999 ) { echo 'ESTADO: RECHAZADA' . PHP_EOL ; } else { /* Esto no deber\u00eda darse, pero si ocurre, es un CDR inv\u00e1lido que deber\u00eda tratarse como un error-excepci\u00f3n. */ /*code: 0100 a 1999 */ echo 'Excepci\u00f3n' ; } echo $cdr -> getDescription () . PHP_EOL ; M\u00e1s detalles sobre que hacer si una factura fue observada o rechazada, aqu\u00ed .","title":"Lectura del CDR"},{"location":"starter/#ejecutar","text":"Finalmente ejecutaremos el script desde la linea de comandos. php factura.php y si todo sale bien obtendremos como respuesta. Exito! ESTADO: ACEPTADA La Factura numero F001-1, ha sido aceptada Estructura finald del proyecto de ejemplo: / \u251c\u2500\u2500 vendor/ \u251c\u2500\u2500 certificate.pem \u251c\u2500\u2500 composer.json \u251c\u2500\u2500 config.php \u251c\u2500\u2500 factura.php \u251c\u2500\u2500 20123456789-01-F001-1.xml \u251c\u2500\u2500 R-20123456789-01-F001-1.zip Este ejemplo puedes encontrarlo en @thegreenter/firststeps .","title":"Ejecutar"},{"location":"starter/#que-sigue","text":"Detalles de uso de greenter Ejemplos de comprobantes electr\u00f3nicos Revisar los paquetes que componen greenter","title":"\u00bfQue sigue?"},{"location":"starter/#comentarios","text":"Pueden unirse a \ud83d\udc4b Greenter Community . Comprobante de Recepci\u00f3n (CDR), es un archivo xml que contiene la respuesta de SUNAT, al env\u00edo previo de un comprobante electr\u00f3nico, en ella se indica si un comprobante ha sido aceptado, aceptado con observaciones o rechazado. \u21a9 \u21a9","title":"Comentarios"},{"location":"usage/","text":"Uso de Greenter \u00b6 M\u00e1s opciones que tenemos al utilizar Greenter . Generar XML firmado \u00b6 El ejemplo b\u00e1sico nos mostr\u00f3 como realizar todo el proceso de facturacion con un solo m\u00e9todo send() , pero si necesitamos generar solo el XML firmado, lo cual seria \u00fatil para Boletas de Venta ya que estas no se env\u00edan a SUNAT individualmente. <?php use Greenter\\Model\\Sale\\Invoice ; use Greenter\\See ; $boleta = ( new Invoice ()) -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '0101' ) -> setTipoDoc ( '03' ) // C\u00f3digo para Boletas, ver Catalog. 51 -> setSerie ( 'B001' ) -> setCorrelativo ( '1' ) // ... ; $see = new See (); $see -> setCertificate ( file_get_contents ( __DIR__ . '/certificate.pem' )); $xml = $see -> getXmlSigned ( $boleta ); file_put_contents ( '20000000001-03-B001-1.xml' , $xml ); Enviar XML generado \u00b6 Si necesitas enviar un XML previamente generado, debes seguir el siguiente ejemplo. <?php require __DIR__ . '/vendor/autoload.php' ; $see = require __DIR__ . '/config.php' ; $xmlSigned = file_get_contents ( '20000000001-01-F001-1.xml' ); $result = $see -> sendXmlFile ( $xmlSigned ); // $result se maneja del mismo modo que con el metodo send() Resumen diario \u00b6 Para comunicar las boletas de ventas emitidas o anuladas, as\u00ed como las notas de cr\u00e9dito/d\u00e9bito releacionadas, necesita hacerlo mediante un resumen diario . A diferencia del env\u00edo de una factura, donde la respuesta es inmediata, en este documento debemos hacer un consulta adicional para conocer su estado utilizando el numero de ticket . <?php use Greenter\\Model\\Company\\Company ; use Greenter\\Model\\Company\\Address ; use Greenter\\Model\\Sale\\Document ; use Greenter\\Model\\Summary\\Summary ; use Greenter\\Model\\Summary\\SummaryDetail ; $company = new Company (); $company -> setRuc ( '20000000001' ) -> setRazonSocial ( 'EMPRESA SAC' ) -> setNombreComercial ( 'EMPRESA' ) -> setAddress (( new Address ()) -> setUbigueo ( '150101' ) -> setDepartamento ( 'LIMA' ) -> setProvincia ( 'LIMA' ) -> setDistrito ( 'LIMA' ) -> setUrbanizacion ( 'Albar' ) -> setDireccion ( 'AV ROSALES' )); $detail = new SummaryDetail (); $detail -> setTipoDoc ( '07' ) // Nota de Credito -> setSerieNro ( 'B001-4' ) -> setDocReferencia (( new Document ()) // Documento relacionado (Boleta) -> setTipoDoc ( '03' ) -> setNroDoc ( 'B001-1' )) -> setEstado ( '1' ) // Emisi\u00f3n -> setClienteTipo ( '1' ) // Tipo documento identidad: DNI -> setClienteNro ( '00000000' ) // Nro de documento identidad -> setTotal ( 200 ) -> setMtoOperGravadas ( 40 ) -> setMtoOperExoneradas ( 50 ) -> setMtoOperInafectas ( 100 ) -> setMtoIGV ( 7.2 ) -> setMtoISC ( 2.8 ); $detail2 = new SummaryDetail (); $detail2 -> setTipoDoc ( '03' ) // Boleta -> setSerieNro ( 'B001-2' ) -> setEstado ( '3' ) // Anulaci\u00f3n -> setClienteTipo ( '1' ) -> setClienteNro ( '00000000' ) -> setTotal ( 119 ) -> setMtoOperGravadas ( 20 ) -> setMtoOperInafectas ( 24.4 ) -> setMtoOperExoneradas ( 50 ) -> setMtoOtrosCargos ( 21 ) -> setMtoIGV ( 3.6 ); $resumen = new Summary (); $resumen -> setFecGeneracion ( new \\DateTime ( '2020-08-01' )) // Fecha de emisi\u00f3n de las boletas. -> setFecResumen ( new \\DateTime ( '2020-08-02' )) // Fecha de env\u00edo del resumen diario. -> setCorrelativo ( '001' ) // Correlativo, necesario para diferenciar de otros Resumen diario del mismo d\u00eda. -> setCompany ( $company ) -> setDetails ([ $detail , $detail2 ]); $result = $see -> send ( $resumen ); // Guardar XML file_put_contents ( $resumen -> getName () . '.xml' , $see -> getFactory () -> getLastXml ()); if ( ! $result -> isSuccess ()) { // Si hubo error al conectarse al servicio de SUNAT. var_dump ( $result -> getError ()); exit (); } $ticket = $result -> getTicket (); echo 'Ticket : ' . $ticket . PHP_EOL ; $statusResult = $see -> getStatus ( $ticket ); if ( ! $statusResult -> isSuccess ()) { // Si hubo error al conectarse al servicio de SUNAT. var_dump ( $statusResult -> getError ()); return ; } echo $statusResult -> getCdrResponse () -> getDescription (); // Guardar CDR file_put_contents ( 'R-' . $resumen -> getName () . '.zip' , $statusResult -> getCdrZip ()); Comunicacion de Baja \u00b6 Para comunicar a SUNAT las anulaciones de facturas y sus notas de cr\u00e9dito/d\u00e9bito releacionadas, necesita hacerlo mediante el documento de comunicaci\u00f3n de baja . El env\u00edo a los servicios de SUNAT se maneja de la misma forma que el resumen diario . <?php use Greenter\\Model\\Voided\\Voided ; use Greenter\\Model\\Voided\\VoidedDetail ; $detail1 = new VoidedDetail (); $detail1 -> setTipoDoc ( '01' ) // Factura -> setSerie ( 'F001' ) -> setCorrelativo ( '1' ) -> setDesMotivoBaja ( 'ERROR EN C\u00c1LCULOS' ); // Motivo por el cual se da de baja. $detail2 = new VoidedDetail (); $detail2 -> setTipoDoc ( '07' ) // Nota de Cr\u00e9dito -> setSerie ( 'FC01' ) -> setCorrelativo ( '2' ) -> setDesMotivoBaja ( 'ERROR DE RUC' ); $cDeBaja = new Voided (); $cDeBaja -> setCorrelativo ( '00001' ) // Correlativo, necesario para diferenciar c. de baja de en un mismo d\u00eda. -> setFecGeneracion ( new \\DateTime ( '2020-08-01' )) // Fecha de emisi\u00f3n de los comprobantes a dar de baja -> setFecComunicacion ( new \\DateTime ( '2020-08-02' )) // Fecha de envio de la C. de baja -> setCompany ( $company ) -> setDetails ([ $detail1 , $detail2 ]); $result = $see -> send ( $cDeBaja ); // Guardar XML file_put_contents ( $cDeBaja -> getName () . '.xml' , $see -> getFactory () -> getLastXml ()); if ( ! $result -> isSuccess ()) { // Si hubo error al conectarse al servicio de SUNAT. var_dump ( $result -> getError ()); exit (); } $ticket = $result -> getTicket (); echo 'Ticket : ' . $ticket . PHP_EOL ; $statusResult = $see -> getStatus ( $ticket ); if ( ! $statusResult -> isSuccess ()) { // Si hubo error al conectarse al servicio de SUNAT. var_dump ( $statusResult -> getError ()); return ; } echo $statusResult -> getCdrResponse () -> getDescription (); // Guardar CDR file_put_contents ( 'R-' . $cDeBaja -> getName () . '.zip' , $statusResult -> getCdrZip ()); Anulaci\u00f3n de Boletas Para anular boletas y NCR, NDB relacionadas, se utiliza el resumen diario indicando el campo estado=3","title":"Detalles de uso"},{"location":"usage/#uso-de-greenter","text":"M\u00e1s opciones que tenemos al utilizar Greenter .","title":"Uso de Greenter"},{"location":"usage/#generar-xml-firmado","text":"El ejemplo b\u00e1sico nos mostr\u00f3 como realizar todo el proceso de facturacion con un solo m\u00e9todo send() , pero si necesitamos generar solo el XML firmado, lo cual seria \u00fatil para Boletas de Venta ya que estas no se env\u00edan a SUNAT individualmente. <?php use Greenter\\Model\\Sale\\Invoice ; use Greenter\\See ; $boleta = ( new Invoice ()) -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '0101' ) -> setTipoDoc ( '03' ) // C\u00f3digo para Boletas, ver Catalog. 51 -> setSerie ( 'B001' ) -> setCorrelativo ( '1' ) // ... ; $see = new See (); $see -> setCertificate ( file_get_contents ( __DIR__ . '/certificate.pem' )); $xml = $see -> getXmlSigned ( $boleta ); file_put_contents ( '20000000001-03-B001-1.xml' , $xml );","title":"Generar XML firmado"},{"location":"usage/#enviar-xml-generado","text":"Si necesitas enviar un XML previamente generado, debes seguir el siguiente ejemplo. <?php require __DIR__ . '/vendor/autoload.php' ; $see = require __DIR__ . '/config.php' ; $xmlSigned = file_get_contents ( '20000000001-01-F001-1.xml' ); $result = $see -> sendXmlFile ( $xmlSigned ); // $result se maneja del mismo modo que con el metodo send()","title":"Enviar XML generado"},{"location":"usage/#resumen-diario","text":"Para comunicar las boletas de ventas emitidas o anuladas, as\u00ed como las notas de cr\u00e9dito/d\u00e9bito releacionadas, necesita hacerlo mediante un resumen diario . A diferencia del env\u00edo de una factura, donde la respuesta es inmediata, en este documento debemos hacer un consulta adicional para conocer su estado utilizando el numero de ticket . <?php use Greenter\\Model\\Company\\Company ; use Greenter\\Model\\Company\\Address ; use Greenter\\Model\\Sale\\Document ; use Greenter\\Model\\Summary\\Summary ; use Greenter\\Model\\Summary\\SummaryDetail ; $company = new Company (); $company -> setRuc ( '20000000001' ) -> setRazonSocial ( 'EMPRESA SAC' ) -> setNombreComercial ( 'EMPRESA' ) -> setAddress (( new Address ()) -> setUbigueo ( '150101' ) -> setDepartamento ( 'LIMA' ) -> setProvincia ( 'LIMA' ) -> setDistrito ( 'LIMA' ) -> setUrbanizacion ( 'Albar' ) -> setDireccion ( 'AV ROSALES' )); $detail = new SummaryDetail (); $detail -> setTipoDoc ( '07' ) // Nota de Credito -> setSerieNro ( 'B001-4' ) -> setDocReferencia (( new Document ()) // Documento relacionado (Boleta) -> setTipoDoc ( '03' ) -> setNroDoc ( 'B001-1' )) -> setEstado ( '1' ) // Emisi\u00f3n -> setClienteTipo ( '1' ) // Tipo documento identidad: DNI -> setClienteNro ( '00000000' ) // Nro de documento identidad -> setTotal ( 200 ) -> setMtoOperGravadas ( 40 ) -> setMtoOperExoneradas ( 50 ) -> setMtoOperInafectas ( 100 ) -> setMtoIGV ( 7.2 ) -> setMtoISC ( 2.8 ); $detail2 = new SummaryDetail (); $detail2 -> setTipoDoc ( '03' ) // Boleta -> setSerieNro ( 'B001-2' ) -> setEstado ( '3' ) // Anulaci\u00f3n -> setClienteTipo ( '1' ) -> setClienteNro ( '00000000' ) -> setTotal ( 119 ) -> setMtoOperGravadas ( 20 ) -> setMtoOperInafectas ( 24.4 ) -> setMtoOperExoneradas ( 50 ) -> setMtoOtrosCargos ( 21 ) -> setMtoIGV ( 3.6 ); $resumen = new Summary (); $resumen -> setFecGeneracion ( new \\DateTime ( '2020-08-01' )) // Fecha de emisi\u00f3n de las boletas. -> setFecResumen ( new \\DateTime ( '2020-08-02' )) // Fecha de env\u00edo del resumen diario. -> setCorrelativo ( '001' ) // Correlativo, necesario para diferenciar de otros Resumen diario del mismo d\u00eda. -> setCompany ( $company ) -> setDetails ([ $detail , $detail2 ]); $result = $see -> send ( $resumen ); // Guardar XML file_put_contents ( $resumen -> getName () . '.xml' , $see -> getFactory () -> getLastXml ()); if ( ! $result -> isSuccess ()) { // Si hubo error al conectarse al servicio de SUNAT. var_dump ( $result -> getError ()); exit (); } $ticket = $result -> getTicket (); echo 'Ticket : ' . $ticket . PHP_EOL ; $statusResult = $see -> getStatus ( $ticket ); if ( ! $statusResult -> isSuccess ()) { // Si hubo error al conectarse al servicio de SUNAT. var_dump ( $statusResult -> getError ()); return ; } echo $statusResult -> getCdrResponse () -> getDescription (); // Guardar CDR file_put_contents ( 'R-' . $resumen -> getName () . '.zip' , $statusResult -> getCdrZip ());","title":"Resumen diario"},{"location":"usage/#comunicacion-de-baja","text":"Para comunicar a SUNAT las anulaciones de facturas y sus notas de cr\u00e9dito/d\u00e9bito releacionadas, necesita hacerlo mediante el documento de comunicaci\u00f3n de baja . El env\u00edo a los servicios de SUNAT se maneja de la misma forma que el resumen diario . <?php use Greenter\\Model\\Voided\\Voided ; use Greenter\\Model\\Voided\\VoidedDetail ; $detail1 = new VoidedDetail (); $detail1 -> setTipoDoc ( '01' ) // Factura -> setSerie ( 'F001' ) -> setCorrelativo ( '1' ) -> setDesMotivoBaja ( 'ERROR EN C\u00c1LCULOS' ); // Motivo por el cual se da de baja. $detail2 = new VoidedDetail (); $detail2 -> setTipoDoc ( '07' ) // Nota de Cr\u00e9dito -> setSerie ( 'FC01' ) -> setCorrelativo ( '2' ) -> setDesMotivoBaja ( 'ERROR DE RUC' ); $cDeBaja = new Voided (); $cDeBaja -> setCorrelativo ( '00001' ) // Correlativo, necesario para diferenciar c. de baja de en un mismo d\u00eda. -> setFecGeneracion ( new \\DateTime ( '2020-08-01' )) // Fecha de emisi\u00f3n de los comprobantes a dar de baja -> setFecComunicacion ( new \\DateTime ( '2020-08-02' )) // Fecha de envio de la C. de baja -> setCompany ( $company ) -> setDetails ([ $detail1 , $detail2 ]); $result = $see -> send ( $cDeBaja ); // Guardar XML file_put_contents ( $cDeBaja -> getName () . '.xml' , $see -> getFactory () -> getLastXml ()); if ( ! $result -> isSuccess ()) { // Si hubo error al conectarse al servicio de SUNAT. var_dump ( $result -> getError ()); exit (); } $ticket = $result -> getTicket (); echo 'Ticket : ' . $ticket . PHP_EOL ; $statusResult = $see -> getStatus ( $ticket ); if ( ! $statusResult -> isSuccess ()) { // Si hubo error al conectarse al servicio de SUNAT. var_dump ( $statusResult -> getError ()); return ; } echo $statusResult -> getCdrResponse () -> getDescription (); // Guardar CDR file_put_contents ( 'R-' . $cDeBaja -> getName () . '.zip' , $statusResult -> getCdrZip ()); Anulaci\u00f3n de Boletas Para anular boletas y NCR, NDB relacionadas, se utiliza el resumen diario indicando el campo estado=3","title":"Comunicacion de Baja"},{"location":"examples/anticipo/","text":"Factura con Deducci\u00f3n de Anticipos \u00b6 Las lineas resaltadas son propias de este modelo de factura. C\u00f3digo \u00b6 <?php use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\Legend ; use Greenter\\Model\\Sale\\Prepayment ; use Greenter\\Model\\Sale\\SaleDetail ; $invoice = new Invoice (); $invoice -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '0101' ) -> setTipoDoc ( '01' ) -> setSerie ( 'F001' ) -> setCorrelativo ( '123' ) -> setFechaEmision ( new \\DateTime ()) -> setTipoMoneda ( 'PEN' ) -> setClient ( $this -> getClient ()) -> setCompany ( $this -> getCompany ()) -> setMtoOperGravadas ( 200 ) -> setMtoIGV ( 36 ) -> setValorVenta ( 200 ) -> setTotalImpuestos ( 36 ) -> setSubTotal ( 236 ) -> setMtoImpVenta ( 136 ) // Disminuci\u00f3n por anticipo -> setAnticipos ([ ( new Prepayment ()) -> setTipoDocRel ( '02' ) // catalog. 12 -> setNroDocRel ( 'F001-111' ) -> setTotal ( 100 ) ]) -> setTotalAnticipos ( 100 ); $detail = new SaleDetail (); $detail -> setCodProducto ( 'P001' ) -> setUnidad ( 'NIU' ) -> setDescripcion ( 'PROD 1' ) -> setCantidad ( 2 ) -> setMtoValorUnitario ( 100 ) -> setMtoValorVenta ( 200 ) -> setMtoBaseIgv ( 200 ) -> setPorcentajeIgv ( 18 ) -> setIgv ( 36 ) -> setTipAfeIgv ( '10' ) -> setTotalImpuestos ( 36 ) -> setMtoPrecioUnitario ( 118 ) ; $invoice -> setDetails ([ $detail ]) -> setLegends ([ ( new Legend ()) -> setCode ( '1000' ) -> setValue ( 'SON CIENTO DIECIOCHO CON OO/100 SOLES' ) ]);","title":"F. Anticipos"},{"location":"examples/anticipo/#factura-con-deduccion-de-anticipos","text":"Las lineas resaltadas son propias de este modelo de factura.","title":"Factura con Deducci\u00f3n de Anticipos"},{"location":"examples/anticipo/#codigo","text":"<?php use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\Legend ; use Greenter\\Model\\Sale\\Prepayment ; use Greenter\\Model\\Sale\\SaleDetail ; $invoice = new Invoice (); $invoice -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '0101' ) -> setTipoDoc ( '01' ) -> setSerie ( 'F001' ) -> setCorrelativo ( '123' ) -> setFechaEmision ( new \\DateTime ()) -> setTipoMoneda ( 'PEN' ) -> setClient ( $this -> getClient ()) -> setCompany ( $this -> getCompany ()) -> setMtoOperGravadas ( 200 ) -> setMtoIGV ( 36 ) -> setValorVenta ( 200 ) -> setTotalImpuestos ( 36 ) -> setSubTotal ( 236 ) -> setMtoImpVenta ( 136 ) // Disminuci\u00f3n por anticipo -> setAnticipos ([ ( new Prepayment ()) -> setTipoDocRel ( '02' ) // catalog. 12 -> setNroDocRel ( 'F001-111' ) -> setTotal ( 100 ) ]) -> setTotalAnticipos ( 100 ); $detail = new SaleDetail (); $detail -> setCodProducto ( 'P001' ) -> setUnidad ( 'NIU' ) -> setDescripcion ( 'PROD 1' ) -> setCantidad ( 2 ) -> setMtoValorUnitario ( 100 ) -> setMtoValorVenta ( 200 ) -> setMtoBaseIgv ( 200 ) -> setPorcentajeIgv ( 18 ) -> setIgv ( 36 ) -> setTipAfeIgv ( '10' ) -> setTotalImpuestos ( 36 ) -> setMtoPrecioUnitario ( 118 ) ; $invoice -> setDetails ([ $detail ]) -> setLegends ([ ( new Legend ()) -> setCode ( '1000' ) -> setValue ( 'SON CIENTO DIECIOCHO CON OO/100 SOLES' ) ]);","title":"C\u00f3digo"},{"location":"examples/boleta/","text":"Boleta de Venta \u00b6 Este ejemplo muestra la creaci\u00f3n del XML para una boleta de venta electr\u00f3nica, empleando el est\u00e1ndar UBL 2.1 Ejemplo \u00b6 <?php use Greenter\\Model\\Client\\Client ; use Greenter\\Model\\Company\\Company ; use Greenter\\Model\\Company\\Address ; use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\SaleDetail ; use Greenter\\Model\\Sale\\Legend ; require __DIR__ . '/vendor/autoload.php' ; $see = require __DIR__ . '/config.php' ; // Cliente $client = new Client (); $client -> setTipoDoc ( '1' ) -> setNumDoc ( '46712369' ) -> setRznSocial ( 'MARIA RAMOS ARTEAGA' ); // Emisor $address = new Address (); $address -> setUbigueo ( '150101' ) -> setDepartamento ( 'LIMA' ) -> setProvincia ( 'LIMA' ) -> setDistrito ( 'LIMA' ) -> setUrbanizacion ( '-' ) -> setDireccion ( 'AV LOS GERUNDIOS' ); $company = new Company (); $company -> setRuc ( '20000000001' ) -> setRazonSocial ( 'EMPRESA SAC' ) -> setNombreComercial ( 'EMPRESA' ) -> setAddress ( $address ); // Venta $invoice = ( new Invoice ()) -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '0101' ) // Catalog. 51 -> setTipoDoc ( '03' ) -> setSerie ( 'B001' ) -> setCorrelativo ( '1' ) -> setFechaEmision ( new DateTime ()) -> setTipoMoneda ( 'PEN' ) -> setClient ( $client ) -> setMtoOperGravadas ( 100.00 ) -> setMtoIGV ( 18.00 ) -> setTotalImpuestos ( 18.00 ) -> setValorVenta ( 100.00 ) -> setSubTotal ( 118.00 ) -> setMtoImpVenta ( 118.00 ) -> setCompany ( $company ); $item = ( new SaleDetail ()) -> setCodProducto ( 'P001' ) -> setUnidad ( 'NIU' ) -> setCantidad ( 2 ) -> setDescripcion ( 'PRODUCTO 1' ) -> setMtoBaseIgv ( 100 ) -> setPorcentajeIgv ( 18.00 ) // 18% -> setIgv ( 18.00 ) -> setTipAfeIgv ( '10' ) -> setTotalImpuestos ( 18.00 ) -> setMtoValorVenta ( 100.00 ) -> setMtoValorUnitario ( 50.00 ) -> setMtoPrecioUnitario ( 59.00 ); $legend = ( new Legend ()) -> setCode ( '1000' ) -> setValue ( 'SON CIENTO DIECIOCHO CON 00/100 SOLES' ); $invoice -> setDetails ([ $item ]) -> setLegends ([ $legend ]); $xml = $see -> getXmlSigned ( $invoice ); // Guardar XML file_put_contents ( $invoice -> getName () . '.xml' , $xml );","title":"Boleta de Venta"},{"location":"examples/boleta/#boleta-de-venta","text":"Este ejemplo muestra la creaci\u00f3n del XML para una boleta de venta electr\u00f3nica, empleando el est\u00e1ndar UBL 2.1","title":"Boleta de Venta"},{"location":"examples/boleta/#ejemplo","text":"<?php use Greenter\\Model\\Client\\Client ; use Greenter\\Model\\Company\\Company ; use Greenter\\Model\\Company\\Address ; use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\SaleDetail ; use Greenter\\Model\\Sale\\Legend ; require __DIR__ . '/vendor/autoload.php' ; $see = require __DIR__ . '/config.php' ; // Cliente $client = new Client (); $client -> setTipoDoc ( '1' ) -> setNumDoc ( '46712369' ) -> setRznSocial ( 'MARIA RAMOS ARTEAGA' ); // Emisor $address = new Address (); $address -> setUbigueo ( '150101' ) -> setDepartamento ( 'LIMA' ) -> setProvincia ( 'LIMA' ) -> setDistrito ( 'LIMA' ) -> setUrbanizacion ( '-' ) -> setDireccion ( 'AV LOS GERUNDIOS' ); $company = new Company (); $company -> setRuc ( '20000000001' ) -> setRazonSocial ( 'EMPRESA SAC' ) -> setNombreComercial ( 'EMPRESA' ) -> setAddress ( $address ); // Venta $invoice = ( new Invoice ()) -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '0101' ) // Catalog. 51 -> setTipoDoc ( '03' ) -> setSerie ( 'B001' ) -> setCorrelativo ( '1' ) -> setFechaEmision ( new DateTime ()) -> setTipoMoneda ( 'PEN' ) -> setClient ( $client ) -> setMtoOperGravadas ( 100.00 ) -> setMtoIGV ( 18.00 ) -> setTotalImpuestos ( 18.00 ) -> setValorVenta ( 100.00 ) -> setSubTotal ( 118.00 ) -> setMtoImpVenta ( 118.00 ) -> setCompany ( $company ); $item = ( new SaleDetail ()) -> setCodProducto ( 'P001' ) -> setUnidad ( 'NIU' ) -> setCantidad ( 2 ) -> setDescripcion ( 'PRODUCTO 1' ) -> setMtoBaseIgv ( 100 ) -> setPorcentajeIgv ( 18.00 ) // 18% -> setIgv ( 18.00 ) -> setTipAfeIgv ( '10' ) -> setTotalImpuestos ( 18.00 ) -> setMtoValorVenta ( 100.00 ) -> setMtoValorUnitario ( 50.00 ) -> setMtoPrecioUnitario ( 59.00 ); $legend = ( new Legend ()) -> setCode ( '1000' ) -> setValue ( 'SON CIENTO DIECIOCHO CON 00/100 SOLES' ); $invoice -> setDetails ([ $item ]) -> setLegends ([ $legend ]); $xml = $see -> getXmlSigned ( $invoice ); // Guardar XML file_put_contents ( $invoice -> getName () . '.xml' , $xml );","title":"Ejemplo"},{"location":"examples/contingencia/","text":"Contingencia \u00b6 Existen situaciones adversas por la que un emisor electr\u00f3nico no puede emitir comprobantes electronicos, en ese caso SUNAT les da la posibilidad de emitir un comprobante fisico, como anteriormente se realizaba. Para informar a SUNAT de estos comprobantes, a partir del 01-09-2018 se envi\u00e1 de la misma forma como se hace con los comprobantes electr\u00f3nicos. Las boletas por contingencia se pueden seguir enviando mediante el resumen diario de boletas. Representaci\u00f3n Impresa \u00b6 La representaci\u00f3n impresa de los comprobantes de contingencia deben incluir algunas leyendas, el primero: \"Emisor electr\u00f3nico obligado\" y otra dependiendo del tipo de comprobante Tipo documento Leyenda Factura y Boleta \"Comprobante de Pago emitido en contingencia\" Nota de Cr\u00e9dito \"Nota de Cr\u00e9dito emitida en contingencia\" Nota de D\u00e9bito \"Nota de D\u00e9dito emitida en contingencia\" C. de Retenci\u00f3n \"Comprobante de Retenci\u00f3n emitido en contingencia\" C. de Percepci\u00f3n \"Comprobante de Percepci\u00f3n emitido en contingencia\" Factura Electr\u00f3nica \u00b6 El cambio con respecto a la emision normal de un comprobante electr\u00f3nico es la serie, que es num\u00e9rica. <?php //... $invoice -> setSerie ( '0001' ); //... Referencia \u00b6 Procedimiento de contingencia - SUNAT","title":"Contingencia"},{"location":"examples/contingencia/#contingencia","text":"Existen situaciones adversas por la que un emisor electr\u00f3nico no puede emitir comprobantes electronicos, en ese caso SUNAT les da la posibilidad de emitir un comprobante fisico, como anteriormente se realizaba. Para informar a SUNAT de estos comprobantes, a partir del 01-09-2018 se envi\u00e1 de la misma forma como se hace con los comprobantes electr\u00f3nicos. Las boletas por contingencia se pueden seguir enviando mediante el resumen diario de boletas.","title":"Contingencia"},{"location":"examples/contingencia/#representacion-impresa","text":"La representaci\u00f3n impresa de los comprobantes de contingencia deben incluir algunas leyendas, el primero: \"Emisor electr\u00f3nico obligado\" y otra dependiendo del tipo de comprobante Tipo documento Leyenda Factura y Boleta \"Comprobante de Pago emitido en contingencia\" Nota de Cr\u00e9dito \"Nota de Cr\u00e9dito emitida en contingencia\" Nota de D\u00e9bito \"Nota de D\u00e9dito emitida en contingencia\" C. de Retenci\u00f3n \"Comprobante de Retenci\u00f3n emitido en contingencia\" C. de Percepci\u00f3n \"Comprobante de Percepci\u00f3n emitido en contingencia\"","title":"Representaci\u00f3n Impresa"},{"location":"examples/contingencia/#factura-electronica","text":"El cambio con respecto a la emision normal de un comprobante electr\u00f3nico es la serie, que es num\u00e9rica. <?php //... $invoice -> setSerie ( '0001' ); //...","title":"Factura Electr\u00f3nica"},{"location":"examples/contingencia/#referencia","text":"Procedimiento de contingencia - SUNAT","title":"Referencia"},{"location":"examples/descuento-linea/","text":"Factura con Descuentos \u00b6 Las lineas resaltadas son propias de este modelo de factura. C\u00f3digo \u00b6 <?php use Greenter\\Model\\Sale\\Charge ; use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoContado ; use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\Legend ; use Greenter\\Model\\Sale\\SaleDetail ; $invoice = new Invoice (); $invoice -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '0101' ) -> setTipoDoc ( '01' ) -> setSerie ( 'F001' ) -> setCorrelativo ( '123' ) -> setFechaEmision ( new \\DateTime ()) -> setFormaPago ( new FormaPagoContado ()) -> setTipoMoneda ( 'PEN' ) -> setClient ( $this -> getClient ()) -> setCompany ( $this -> getCompany ()) -> setMtoOperGravadas ( 180 ) -> setMtoIGV ( 32.40 ) -> setTotalImpuestos ( 32.40 ) -> setValorVenta ( 180 ) -> setSubTotal ( 212.40 ) -> setMtoImpVenta ( 212.40 ); $detail = new SaleDetail (); $detail -> setCodProducto ( 'P001' ) -> setUnidad ( 'NIU' ) -> setDescripcion ( 'PROD 1' ) -> setCantidad ( 2 ) -> setMtoValorUnitario ( 100 ) -> setDescuentos ([ ( new Charge ()) -> setCodTipo ( '00' ) // Catalog. 53 -> setMontoBase ( 200 ) -> setFactor ( 0.10 ) -> setMonto ( 20 ) ]) -> setMtoValorVenta ( 180 ) -> setMtoBaseIgv ( 180 ) -> setPorcentajeIgv ( 18 ) -> setIgv ( 32.40 ) -> setTipAfeIgv ( '10' ) -> setTotalImpuestos ( 32.40 ) -> setMtoPrecioUnitario ( 106.3 ) ; $invoice -> setDetails ([ $detail ]) -> setLegends ([ ( new Legend ()) -> setCode ( '1000' ) -> setValue ( 'SON DOSCIENTOS DOCE CON 40/100 SOLES' ) ]);","title":"F. Descuentos"},{"location":"examples/descuento-linea/#factura-con-descuentos","text":"Las lineas resaltadas son propias de este modelo de factura.","title":"Factura con Descuentos"},{"location":"examples/descuento-linea/#codigo","text":"<?php use Greenter\\Model\\Sale\\Charge ; use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoContado ; use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\Legend ; use Greenter\\Model\\Sale\\SaleDetail ; $invoice = new Invoice (); $invoice -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '0101' ) -> setTipoDoc ( '01' ) -> setSerie ( 'F001' ) -> setCorrelativo ( '123' ) -> setFechaEmision ( new \\DateTime ()) -> setFormaPago ( new FormaPagoContado ()) -> setTipoMoneda ( 'PEN' ) -> setClient ( $this -> getClient ()) -> setCompany ( $this -> getCompany ()) -> setMtoOperGravadas ( 180 ) -> setMtoIGV ( 32.40 ) -> setTotalImpuestos ( 32.40 ) -> setValorVenta ( 180 ) -> setSubTotal ( 212.40 ) -> setMtoImpVenta ( 212.40 ); $detail = new SaleDetail (); $detail -> setCodProducto ( 'P001' ) -> setUnidad ( 'NIU' ) -> setDescripcion ( 'PROD 1' ) -> setCantidad ( 2 ) -> setMtoValorUnitario ( 100 ) -> setDescuentos ([ ( new Charge ()) -> setCodTipo ( '00' ) // Catalog. 53 -> setMontoBase ( 200 ) -> setFactor ( 0.10 ) -> setMonto ( 20 ) ]) -> setMtoValorVenta ( 180 ) -> setMtoBaseIgv ( 180 ) -> setPorcentajeIgv ( 18 ) -> setIgv ( 32.40 ) -> setTipAfeIgv ( '10' ) -> setTotalImpuestos ( 32.40 ) -> setMtoPrecioUnitario ( 106.3 ) ; $invoice -> setDetails ([ $detail ]) -> setLegends ([ ( new Legend ()) -> setCode ( '1000' ) -> setValue ( 'SON DOSCIENTOS DOCE CON 40/100 SOLES' ) ]);","title":"C\u00f3digo"},{"location":"examples/detraccion/","text":"Factura con Detracciones \u00b6 Las lineas resaltadas son propias de este modelo de factura. C\u00f3digo \u00b6 <?php use Greenter\\Model\\Sale\\Detraction ; use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoContado ; use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\Legend ; use Greenter\\Model\\Sale\\SaleDetail ; $invoice = new Invoice (); $invoice -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '1001' ) // Catalogo 51: Detracci\u00f3n -> setTipoDoc ( '01' ) -> setSerie ( 'F001' ) -> setCorrelativo ( '127' ) -> setFechaEmision ( new DateTime ()) -> setFormaPago ( new FormaPagoContado ()) -> setTipoMoneda ( 'PEN' ) -> setClient ( $this -> getClient ()) -> setCompany ( $this -> getCompany ()) -> setMtoOperGravadas ( 800 ) -> setMtoIGV ( 144 ) -> setTotalImpuestos ( 144 ) -> setValorVenta ( 800 ) -> setSubTotal ( 944 ) -> setMtoImpVenta ( 944 ) -> setDetraccion ( // MONEDA SIEMPRE EN SOLES ( new Detraction ()) // Carnes y despojos comestibles -> setCodBienDetraccion ( '014' ) // catalog. 54 // Deposito en cuenta -> setCodMedioPago ( '001' ) // catalog. 59 -> setCtaBanco ( '0004-3342343243' ) -> setPercent ( 4.00 ) -> setMount ( 37.76 ) ); $detail = new SaleDetail (); $detail -> setCodProducto ( 'P001' ) -> setUnidad ( 'ZZ' ) -> setDescripcion ( 'PROD 1' ) -> setCantidad ( 4 ) -> setMtoValorUnitario ( 200 ) -> setMtoValorVenta ( 800 ) -> setMtoBaseIgv ( 800 ) -> setPorcentajeIgv ( 18 ) -> setIgv ( 144 ) -> setTipAfeIgv ( '10' ) // Catalogo 07 - Gravado -> setTotalImpuestos ( 144 ) -> setMtoPrecioUnitario ( 236 ) ; $invoice -> setDetails ([ $detail ]) -> setLegends ([ ( new Legend ()) -> setCode ( '1000' ) -> setValue ( 'SON NOVECIENTOS CUARENTA Y CUATRO CON OO/100 SOLES' ), ( new Legend ()) -> setCode ( '2006' ) -> setValue ( 'Operaci\u00f3n sujeta a detracci\u00f3n' ) ]);","title":"F. Detracci\u00f3n"},{"location":"examples/detraccion/#factura-con-detracciones","text":"Las lineas resaltadas son propias de este modelo de factura.","title":"Factura con Detracciones"},{"location":"examples/detraccion/#codigo","text":"<?php use Greenter\\Model\\Sale\\Detraction ; use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoContado ; use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\Legend ; use Greenter\\Model\\Sale\\SaleDetail ; $invoice = new Invoice (); $invoice -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '1001' ) // Catalogo 51: Detracci\u00f3n -> setTipoDoc ( '01' ) -> setSerie ( 'F001' ) -> setCorrelativo ( '127' ) -> setFechaEmision ( new DateTime ()) -> setFormaPago ( new FormaPagoContado ()) -> setTipoMoneda ( 'PEN' ) -> setClient ( $this -> getClient ()) -> setCompany ( $this -> getCompany ()) -> setMtoOperGravadas ( 800 ) -> setMtoIGV ( 144 ) -> setTotalImpuestos ( 144 ) -> setValorVenta ( 800 ) -> setSubTotal ( 944 ) -> setMtoImpVenta ( 944 ) -> setDetraccion ( // MONEDA SIEMPRE EN SOLES ( new Detraction ()) // Carnes y despojos comestibles -> setCodBienDetraccion ( '014' ) // catalog. 54 // Deposito en cuenta -> setCodMedioPago ( '001' ) // catalog. 59 -> setCtaBanco ( '0004-3342343243' ) -> setPercent ( 4.00 ) -> setMount ( 37.76 ) ); $detail = new SaleDetail (); $detail -> setCodProducto ( 'P001' ) -> setUnidad ( 'ZZ' ) -> setDescripcion ( 'PROD 1' ) -> setCantidad ( 4 ) -> setMtoValorUnitario ( 200 ) -> setMtoValorVenta ( 800 ) -> setMtoBaseIgv ( 800 ) -> setPorcentajeIgv ( 18 ) -> setIgv ( 144 ) -> setTipAfeIgv ( '10' ) // Catalogo 07 - Gravado -> setTotalImpuestos ( 144 ) -> setMtoPrecioUnitario ( 236 ) ; $invoice -> setDetails ([ $detail ]) -> setLegends ([ ( new Legend ()) -> setCode ( '1000' ) -> setValue ( 'SON NOVECIENTOS CUARENTA Y CUATRO CON OO/100 SOLES' ), ( new Legend ()) -> setCode ( '2006' ) -> setValue ( 'Operaci\u00f3n sujeta a detracci\u00f3n' ) ]);","title":"C\u00f3digo"},{"location":"examples/exonerada/","text":"Factura Exonerada \u00b6 Las lineas resaltadas son propias de este modelo de factura. C\u00f3digo \u00b6 <?php use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoContado ; use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\Legend ; use Greenter\\Model\\Sale\\SaleDetail ; $invoice = new Invoice (); $invoice -> setFecVencimiento ( new \\DateTime ()) -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '0101' ) -> setTipoDoc ( '01' ) -> setSerie ( 'F001' ) -> setCorrelativo ( '123' ) -> setFechaEmision ( new \\DateTime ()) -> setFormaPago ( new FormaPagoContado ()) -> setTipoMoneda ( 'PEN' ) -> setClient ( $this -> getClient ()) -> setCompany ( $this -> getCompany ()) -> setMtoOperExoneradas ( 200 ) -> setMtoIGV ( 0 ) -> setTotalImpuestos ( 0 ) -> setValorVenta ( 200 ) -> setSubTotal ( 200 ) -> setMtoImpVenta ( 200 ); $detail = new SaleDetail (); $detail -> setCodProducto ( 'P001' ) -> setUnidad ( 'NIU' ) -> setDescripcion ( 'PROD 1' ) -> setCantidad ( 2 ) -> setMtoValorUnitario ( 100 ) -> setMtoValorVenta ( 200 ) -> setMtoBaseIgv ( 200 ) -> setPorcentajeIgv ( 18 ) -> setIgv ( 0 ) -> setTipAfeIgv ( '20' ) -> setTotalImpuestos ( 0 ) -> setMtoPrecioUnitario ( 100 ) ; $invoice -> setDetails ([ $detail ]) -> setLegends ([ ( new Legend ()) -> setCode ( '1000' ) -> setValue ( 'SON DOSCIENTOS CON OO/100 SOLES' ) ]);","title":"F. Exonerada"},{"location":"examples/exonerada/#factura-exonerada","text":"Las lineas resaltadas son propias de este modelo de factura.","title":"Factura Exonerada"},{"location":"examples/exonerada/#codigo","text":"<?php use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoContado ; use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\Legend ; use Greenter\\Model\\Sale\\SaleDetail ; $invoice = new Invoice (); $invoice -> setFecVencimiento ( new \\DateTime ()) -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '0101' ) -> setTipoDoc ( '01' ) -> setSerie ( 'F001' ) -> setCorrelativo ( '123' ) -> setFechaEmision ( new \\DateTime ()) -> setFormaPago ( new FormaPagoContado ()) -> setTipoMoneda ( 'PEN' ) -> setClient ( $this -> getClient ()) -> setCompany ( $this -> getCompany ()) -> setMtoOperExoneradas ( 200 ) -> setMtoIGV ( 0 ) -> setTotalImpuestos ( 0 ) -> setValorVenta ( 200 ) -> setSubTotal ( 200 ) -> setMtoImpVenta ( 200 ); $detail = new SaleDetail (); $detail -> setCodProducto ( 'P001' ) -> setUnidad ( 'NIU' ) -> setDescripcion ( 'PROD 1' ) -> setCantidad ( 2 ) -> setMtoValorUnitario ( 100 ) -> setMtoValorVenta ( 200 ) -> setMtoBaseIgv ( 200 ) -> setPorcentajeIgv ( 18 ) -> setIgv ( 0 ) -> setTipAfeIgv ( '20' ) -> setTotalImpuestos ( 0 ) -> setMtoPrecioUnitario ( 100 ) ; $invoice -> setDetails ([ $detail ]) -> setLegends ([ ( new Legend ()) -> setCode ( '1000' ) -> setValue ( 'SON DOSCIENTOS CON OO/100 SOLES' ) ]);","title":"C\u00f3digo"},{"location":"examples/exportacion/","text":"Factura Exportaci\u00f3n \u00b6 Las lineas resaltadas son propias de este modelo de factura. C\u00f3digo \u00b6 <?php use Greenter\\Model\\Client\\Client ; use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoContado ; use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\Legend ; use Greenter\\Model\\Sale\\SaleDetail ; $invoice = new Invoice (); $invoice -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '0200' ) // Tipo Operacion: exportaction -> setTipoDoc ( '01' ) -> setSerie ( 'F001' ) -> setCorrelativo ( '123' ) -> setFechaEmision ( new \\DateTime ()) -> setFormaPago ( new FormaPagoContado ()) -> setTipoMoneda ( 'USD' ) -> setCompany ( $this -> getCompany ()) -> setClient (( new Client ()) // Cliente: extranjeria o sin documentos -> setTipoDoc ( '0' ) -> setNumDoc ( '-' ) -> setRznSocial ( 'EXTRANJERO' ) ) -> setMtoOperExportacion ( 100 ) -> setMtoIGV ( 0 ) -> setTotalImpuestos ( 0 ) -> setValorVenta ( 100 ) -> setSubTotal ( 100 ) -> setMtoImpVenta ( 100 ); $detail = new SaleDetail (); $detail -> setCodProducto ( 'P001' ) -> setCodProdSunat ( '43231513' ) // Codigo Producto Sunat, requerido. -> setUnidad ( 'KG' ) -> setDescripcion ( 'PROD 1' ) -> setCantidad ( 2 ) -> setMtoValorUnitario ( 50 ) -> setMtoValorVenta ( 100 ) -> setMtoBaseIgv ( 100 ) -> setPorcentajeIgv ( 0 ) -> setIgv ( 0 ) -> setTipAfeIgv ( '40' ) -> setTotalImpuestos ( 0 ) -> setMtoPrecioUnitario ( 50 ) ; $invoice -> setDetails ([ $detail ]) -> setLegends ([ ( new Legend ()) -> setCode ( '1000' ) -> setValue ( 'SON CIEN CON OO/100 SOLES' ) ]);","title":"F. Exportaci\u00f3n"},{"location":"examples/exportacion/#factura-exportacion","text":"Las lineas resaltadas son propias de este modelo de factura.","title":"Factura Exportaci\u00f3n"},{"location":"examples/exportacion/#codigo","text":"<?php use Greenter\\Model\\Client\\Client ; use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoContado ; use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\Legend ; use Greenter\\Model\\Sale\\SaleDetail ; $invoice = new Invoice (); $invoice -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '0200' ) // Tipo Operacion: exportaction -> setTipoDoc ( '01' ) -> setSerie ( 'F001' ) -> setCorrelativo ( '123' ) -> setFechaEmision ( new \\DateTime ()) -> setFormaPago ( new FormaPagoContado ()) -> setTipoMoneda ( 'USD' ) -> setCompany ( $this -> getCompany ()) -> setClient (( new Client ()) // Cliente: extranjeria o sin documentos -> setTipoDoc ( '0' ) -> setNumDoc ( '-' ) -> setRznSocial ( 'EXTRANJERO' ) ) -> setMtoOperExportacion ( 100 ) -> setMtoIGV ( 0 ) -> setTotalImpuestos ( 0 ) -> setValorVenta ( 100 ) -> setSubTotal ( 100 ) -> setMtoImpVenta ( 100 ); $detail = new SaleDetail (); $detail -> setCodProducto ( 'P001' ) -> setCodProdSunat ( '43231513' ) // Codigo Producto Sunat, requerido. -> setUnidad ( 'KG' ) -> setDescripcion ( 'PROD 1' ) -> setCantidad ( 2 ) -> setMtoValorUnitario ( 50 ) -> setMtoValorVenta ( 100 ) -> setMtoBaseIgv ( 100 ) -> setPorcentajeIgv ( 0 ) -> setIgv ( 0 ) -> setTipAfeIgv ( '40' ) -> setTotalImpuestos ( 0 ) -> setMtoPrecioUnitario ( 50 ) ; $invoice -> setDetails ([ $detail ]) -> setLegends ([ ( new Legend ()) -> setCode ( '1000' ) -> setValue ( 'SON CIEN CON OO/100 SOLES' ) ]);","title":"C\u00f3digo"},{"location":"examples/forma-pago/","text":"Forma de Pago \u00b6 A partir del 4 de Abril de 2021 1 ser\u00e1 obligatorio la inclusi\u00f3n de la forma de pago en el comprobante electr\u00f3nico. Los siguientes ejemplos muestran como incluir los tipos de forma de pago aceptados por SUNAT. Contado \u00b6 <?php use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoContado ; use Greenter\\Model\\Sale\\Invoice ; $invoice = new Invoice (); $invoice -> setFormaPago ( new FormaPagoContado ()); Credito \u00b6 Detalle Monto a pagar 100 Cuota 1 40 Fecha Pago 1 2020-02-10 Cuota 2 60 Fecha Pago 2 2020-02-17 Ejemplo en Factura <?php use Greenter\\Model\\Sale\\Cuota ; use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoCredito ; use Greenter\\Model\\Sale\\Invoice ; $invoice = new Invoice (); $invoice -> setFormaPago ( new FormaPagoCredito ( 100.00 )); $invoice -> setCuotas ([ ( new Cuota ()) -> setMonto ( 40.00 ) -> setFechaPago ( new DateTime ( '2020-02-10 00:00:00-05:00' )), ( new Cuota ()) -> setMonto ( 60.00 ) -> setFechaPago ( new DateTime ( '2020-02-17 00:00:00-05:00' )) ]); Ejemplo en Nota de Cr\u00e9dito <?php use Greenter\\Model\\Sale\\Cuota ; use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoCredito ; use Greenter\\Model\\Sale\\Note ; $ncr = new Note (); $ncr -> setTipoDoc ( '07' ); $ncr -> setFormaPago ( new FormaPagoCredito ( 100.00 )); $ncr -> setCuotas ([ ( new Cuota ()) -> setMonto ( 40.00 ) -> setFechaPago ( new DateTime ( '2020-02-10 00:00:00-05:00' )), ( new Cuota ()) -> setMonto ( 60.00 ) -> setFechaPago ( new DateTime ( '2020-02-17 00:00:00-05:00' )) ]); Cambiar de moneda \u00b6 Por defecto la moneda es la definida en el comprobante, pero puede ser cambiada si es necesario. <?php use Greenter\\Model\\Sale\\Cuota ; use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoCredito ; use Greenter\\Model\\Sale\\Invoice ; $invoice = new Invoice (); $invoice -> setTipoMoneda ( 'USD' ); $invoice -> setFormaPago ( new FormaPagoCredito ( 100.00 , 'PEN' )); $invoice -> setCuotas ([ ( new Cuota ()) -> setMonto ( 40.00 ) -> setMoneda ( 'PEN' ) -> setFechaPago ( new DateTime ( '2020-02-10 00:00:00-05:00' )), ( new Cuota ()) -> setMonto ( 60.00 ) -> setMoneda ( 'PEN' ) -> setFechaPago ( new DateTime ( '2020-02-17 00:00:00-05:00' )) ]); Resoluci\u00f3n N\u00ba 000193-2020/SUNAT - MODIFICAN LA NORMATIVA SOBRE EMISI\u00d3N ELECTR\u00d3NICA EN RELACI\u00d3N CON LA FACTURA ELECTR\u00d3NICA, EL RECIBO POR HONORARIOS ELECTR\u00d3NICO Y LA NOTA DE CR\u00c9DITO ELECTR\u00d3NICA \u21a9","title":"Forma de Pago"},{"location":"examples/forma-pago/#forma-de-pago","text":"A partir del 4 de Abril de 2021 1 ser\u00e1 obligatorio la inclusi\u00f3n de la forma de pago en el comprobante electr\u00f3nico. Los siguientes ejemplos muestran como incluir los tipos de forma de pago aceptados por SUNAT.","title":"Forma de Pago"},{"location":"examples/forma-pago/#contado","text":"<?php use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoContado ; use Greenter\\Model\\Sale\\Invoice ; $invoice = new Invoice (); $invoice -> setFormaPago ( new FormaPagoContado ());","title":"Contado"},{"location":"examples/forma-pago/#credito","text":"Detalle Monto a pagar 100 Cuota 1 40 Fecha Pago 1 2020-02-10 Cuota 2 60 Fecha Pago 2 2020-02-17 Ejemplo en Factura <?php use Greenter\\Model\\Sale\\Cuota ; use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoCredito ; use Greenter\\Model\\Sale\\Invoice ; $invoice = new Invoice (); $invoice -> setFormaPago ( new FormaPagoCredito ( 100.00 )); $invoice -> setCuotas ([ ( new Cuota ()) -> setMonto ( 40.00 ) -> setFechaPago ( new DateTime ( '2020-02-10 00:00:00-05:00' )), ( new Cuota ()) -> setMonto ( 60.00 ) -> setFechaPago ( new DateTime ( '2020-02-17 00:00:00-05:00' )) ]); Ejemplo en Nota de Cr\u00e9dito <?php use Greenter\\Model\\Sale\\Cuota ; use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoCredito ; use Greenter\\Model\\Sale\\Note ; $ncr = new Note (); $ncr -> setTipoDoc ( '07' ); $ncr -> setFormaPago ( new FormaPagoCredito ( 100.00 )); $ncr -> setCuotas ([ ( new Cuota ()) -> setMonto ( 40.00 ) -> setFechaPago ( new DateTime ( '2020-02-10 00:00:00-05:00' )), ( new Cuota ()) -> setMonto ( 60.00 ) -> setFechaPago ( new DateTime ( '2020-02-17 00:00:00-05:00' )) ]);","title":"Credito"},{"location":"examples/forma-pago/#cambiar-de-moneda","text":"Por defecto la moneda es la definida en el comprobante, pero puede ser cambiada si es necesario. <?php use Greenter\\Model\\Sale\\Cuota ; use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoCredito ; use Greenter\\Model\\Sale\\Invoice ; $invoice = new Invoice (); $invoice -> setTipoMoneda ( 'USD' ); $invoice -> setFormaPago ( new FormaPagoCredito ( 100.00 , 'PEN' )); $invoice -> setCuotas ([ ( new Cuota ()) -> setMonto ( 40.00 ) -> setMoneda ( 'PEN' ) -> setFechaPago ( new DateTime ( '2020-02-10 00:00:00-05:00' )), ( new Cuota ()) -> setMonto ( 60.00 ) -> setMoneda ( 'PEN' ) -> setFechaPago ( new DateTime ( '2020-02-17 00:00:00-05:00' )) ]); Resoluci\u00f3n N\u00ba 000193-2020/SUNAT - MODIFICAN LA NORMATIVA SOBRE EMISI\u00d3N ELECTR\u00d3NICA EN RELACI\u00d3N CON LA FACTURA ELECTR\u00d3NICA, EL RECIBO POR HONORARIOS ELECTR\u00d3NICO Y LA NOTA DE CR\u00c9DITO ELECTR\u00d3NICA \u21a9","title":"Cambiar de moneda"},{"location":"examples/gratuita/","text":"Factura Gratuita \u00b6 Las lineas resaltadas son propias de este modelo de factura. C\u00f3digo \u00b6 <?php use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoContado ; use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\Legend ; use Greenter\\Model\\Sale\\SaleDetail ; $invoice = new Invoice (); $invoice -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '0101' ) -> setTipoDoc ( '01' ) -> setSerie ( 'F001' ) -> setCorrelativo ( '123' ) -> setFechaEmision ( new \\DateTime ()) -> setFormaPago ( new FormaPagoContado ()) -> setTipoMoneda ( 'PEN' ) -> setClient ( $this -> getClient ()) -> setCompany ( $this -> getCompany ()) -> setMtoOperGratuitas ( 200 ) -> setMtoIGVGratuitas ( 36 ) -> setTotalImpuestos ( 0 ) -> setValorVenta ( 0 ) -> setSubTotal ( 0 ) -> setMtoImpVenta ( 0 ); $detail = new SaleDetail (); $detail -> setCodProducto ( 'P001' ) -> setUnidad ( 'NIU' ) -> setDescripcion ( 'PROD 1' ) -> setCantidad ( 2 ) -> setMtoValorUnitario ( 0 ) -> setMtoValorGratuito ( 100 ) -> setMtoValorVenta ( 200 ) -> setMtoBaseIgv ( 200 ) -> setPorcentajeIgv ( 18 ) -> setIgv ( 36 ) -> setTipAfeIgv ( '11' ) -> setTotalImpuestos ( 36 ) -> setMtoPrecioUnitario ( 0 ) ; $invoice -> setDetails ([ $detail ]) -> setLegends ([ ( new Legend ()) -> setCode ( '1002' ) -> setValue ( 'TRANSFERENCIA GRATUITA DE UN BIEN Y/O SERVICIO PRESTADO GRATUITAMENTE' ) ]);","title":"F. Gratuita"},{"location":"examples/gratuita/#factura-gratuita","text":"Las lineas resaltadas son propias de este modelo de factura.","title":"Factura Gratuita"},{"location":"examples/gratuita/#codigo","text":"<?php use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoContado ; use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\Legend ; use Greenter\\Model\\Sale\\SaleDetail ; $invoice = new Invoice (); $invoice -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '0101' ) -> setTipoDoc ( '01' ) -> setSerie ( 'F001' ) -> setCorrelativo ( '123' ) -> setFechaEmision ( new \\DateTime ()) -> setFormaPago ( new FormaPagoContado ()) -> setTipoMoneda ( 'PEN' ) -> setClient ( $this -> getClient ()) -> setCompany ( $this -> getCompany ()) -> setMtoOperGratuitas ( 200 ) -> setMtoIGVGratuitas ( 36 ) -> setTotalImpuestos ( 0 ) -> setValorVenta ( 0 ) -> setSubTotal ( 0 ) -> setMtoImpVenta ( 0 ); $detail = new SaleDetail (); $detail -> setCodProducto ( 'P001' ) -> setUnidad ( 'NIU' ) -> setDescripcion ( 'PROD 1' ) -> setCantidad ( 2 ) -> setMtoValorUnitario ( 0 ) -> setMtoValorGratuito ( 100 ) -> setMtoValorVenta ( 200 ) -> setMtoBaseIgv ( 200 ) -> setPorcentajeIgv ( 18 ) -> setIgv ( 36 ) -> setTipAfeIgv ( '11' ) -> setTotalImpuestos ( 36 ) -> setMtoPrecioUnitario ( 0 ) ; $invoice -> setDetails ([ $detail ]) -> setLegends ([ ( new Legend ()) -> setCode ( '1002' ) -> setValue ( 'TRANSFERENCIA GRATUITA DE UN BIEN Y/O SERVICIO PRESTADO GRATUITAMENTE' ) ]);","title":"C\u00f3digo"},{"location":"examples/icbper/","text":"Factura con ICBPER \u00b6 Las lineas resaltadas son propias de este modelo de factura. C\u00f3digo \u00b6 <?php use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoContado ; use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\Legend ; use Greenter\\Model\\Sale\\SaleDetail ; $invoice = new Invoice (); $invoice -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '0101' ) -> setTipoDoc ( '01' ) -> setSerie ( 'F001' ) -> setCorrelativo ( '129' ) -> setFechaEmision ( new \\DateTime ()) -> setFormaPago ( new FormaPagoContado ()) -> setTipoMoneda ( 'PEN' ) -> setClient ( $this -> getClient ()) -> setCompany ( $this -> getCompany ()) -> setMtoOperGravadas ( 200.20 ) -> setMtoIGV ( 36.04 ) -> setIcbper ( 0.80 ) -> setTotalImpuestos ( 36.84 ) -> setValorVenta ( 200.20 ) -> setSubTotal ( 237.04 ) -> setRedondeo ( 0.04 ) -> setMtoImpVenta ( 237 ); $detail = new SaleDetail (); $detail -> setCodProducto ( 'P001' ) -> setUnidad ( 'NIU' ) -> setCantidad ( 2 ) -> setDescripcion ( 'PRODUCTO 1' ) -> setMtoBaseIgv ( 200.00 ) -> setPorcentajeIgv ( 18.0 ) -> setIgv ( 36 ) -> setTotalImpuestos ( 36 ) -> setTipAfeIgv ( '10' ) -> setMtoValorVenta ( 200 ) -> setMtoValorUnitario ( 100 ) -> setMtoPrecioUnitario ( 118 ); $detailBolsa = new SaleDetail (); $detailBolsa -> setCodProducto ( 'P002' ) -> setUnidad ( 'NIU' ) -> setCantidad ( 4 ) -> setDescripcion ( 'BOLSA DE PLASTICO' ) -> setMtoValorUnitario ( 0.05 ) -> setMtoPrecioUnitario ( 0.059 ) -> setMtoValorVenta ( 0.20 ) -> setTipAfeIgv ( '10' ) -> setMtoBaseIgv ( 0.20 ) -> setPorcentajeIgv ( 18.0 ) -> setIgv ( 0.04 ) -> setIcbper ( 0.80 ) // (cantidad)*(factor ICBPER) -> setFactorIcbper ( 0.20 ) -> setTotalImpuestos ( 0.84 ) ; $invoice -> setDetails ([ $detail , $bolsa ]) -> setLegends ([ ( new Legend ()) -> setCode ( '1000' ) -> setValue ( 'SON DOSCIENTOS TREINTA Y SIETE CON 00/100 SOLES' ) ]); Factor ICBPER \u00b6 La cuant\u00eda del impuesto al consumo de las bolsas de pl\u00e1stico es gradual y se aplica por la adquisici\u00f3n unitaria de bolsas de pl\u00e1stico, de acuerdo con el siguiente cronograma: Monto A\u00f1o S/ 0.10 2019 S/ 0.20 2020 S/ 0.30 2021 S/ 0.40 2022 S/ 0.50 2023+","title":"F. ICBPER"},{"location":"examples/icbper/#factura-con-icbper","text":"Las lineas resaltadas son propias de este modelo de factura.","title":"Factura con ICBPER"},{"location":"examples/icbper/#codigo","text":"<?php use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoContado ; use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\Legend ; use Greenter\\Model\\Sale\\SaleDetail ; $invoice = new Invoice (); $invoice -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '0101' ) -> setTipoDoc ( '01' ) -> setSerie ( 'F001' ) -> setCorrelativo ( '129' ) -> setFechaEmision ( new \\DateTime ()) -> setFormaPago ( new FormaPagoContado ()) -> setTipoMoneda ( 'PEN' ) -> setClient ( $this -> getClient ()) -> setCompany ( $this -> getCompany ()) -> setMtoOperGravadas ( 200.20 ) -> setMtoIGV ( 36.04 ) -> setIcbper ( 0.80 ) -> setTotalImpuestos ( 36.84 ) -> setValorVenta ( 200.20 ) -> setSubTotal ( 237.04 ) -> setRedondeo ( 0.04 ) -> setMtoImpVenta ( 237 ); $detail = new SaleDetail (); $detail -> setCodProducto ( 'P001' ) -> setUnidad ( 'NIU' ) -> setCantidad ( 2 ) -> setDescripcion ( 'PRODUCTO 1' ) -> setMtoBaseIgv ( 200.00 ) -> setPorcentajeIgv ( 18.0 ) -> setIgv ( 36 ) -> setTotalImpuestos ( 36 ) -> setTipAfeIgv ( '10' ) -> setMtoValorVenta ( 200 ) -> setMtoValorUnitario ( 100 ) -> setMtoPrecioUnitario ( 118 ); $detailBolsa = new SaleDetail (); $detailBolsa -> setCodProducto ( 'P002' ) -> setUnidad ( 'NIU' ) -> setCantidad ( 4 ) -> setDescripcion ( 'BOLSA DE PLASTICO' ) -> setMtoValorUnitario ( 0.05 ) -> setMtoPrecioUnitario ( 0.059 ) -> setMtoValorVenta ( 0.20 ) -> setTipAfeIgv ( '10' ) -> setMtoBaseIgv ( 0.20 ) -> setPorcentajeIgv ( 18.0 ) -> setIgv ( 0.04 ) -> setIcbper ( 0.80 ) // (cantidad)*(factor ICBPER) -> setFactorIcbper ( 0.20 ) -> setTotalImpuestos ( 0.84 ) ; $invoice -> setDetails ([ $detail , $bolsa ]) -> setLegends ([ ( new Legend ()) -> setCode ( '1000' ) -> setValue ( 'SON DOSCIENTOS TREINTA Y SIETE CON 00/100 SOLES' ) ]);","title":"C\u00f3digo"},{"location":"examples/icbper/#factor-icbper","text":"La cuant\u00eda del impuesto al consumo de las bolsas de pl\u00e1stico es gradual y se aplica por la adquisici\u00f3n unitaria de bolsas de pl\u00e1stico, de acuerdo con el siguiente cronograma: Monto A\u00f1o S/ 0.10 2019 S/ 0.20 2020 S/ 0.30 2021 S/ 0.40 2022 S/ 0.50 2023+","title":"Factor ICBPER"},{"location":"examples/mas/","text":"Otros Ejemplos \u00b6 Puedes encontrar m\u00e1s ejemplos y que podr\u00e1s probar en vivo en @thegreenter/demo .","title":"Otros"},{"location":"examples/mas/#otros-ejemplos","text":"Puedes encontrar m\u00e1s ejemplos y que podr\u00e1s probar en vivo en @thegreenter/demo .","title":"Otros Ejemplos"},{"location":"examples/percepcion/","text":"Factura con Percepci\u00f3n \u00b6 Las lineas resaltadas son propias de este modelo de factura. C\u00f3digo \u00b6 <?php use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoContado ; use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\Legend ; use Greenter\\Model\\Sale\\SaleDetail ; use Greenter\\Model\\Sale\\SalePerception ; $invoice = new Invoice (); $invoice -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '2001' ) // Percepciones -> setTipoDoc ( '01' ) -> setSerie ( 'F001' ) -> setCorrelativo ( '123' ) -> setFechaEmision ( new \\DateTime ()) -> setFormaPago ( new FormaPagoContado ()) -> setTipoMoneda ( 'PEN' ) -> setClient ( $this -> getClient ()) -> setCompany ( $this -> getCompany ()) -> setMtoOperGravadas ( 200 ) -> setMtoIGV ( 36 ) -> setTotalImpuestos ( 36 ) -> setValorVenta ( 200 ) -> setSubTotal ( 236 ) -> setMtoImpVenta ( 236 ) -> setPerception (( new SalePerception ()) -> setCodReg ( '51' ) -> setPorcentaje ( 0.02 ) -> setMtoBase ( 200 ) -> setMto ( 4.00 ) -> setMtoTotal ( 204.00 ) ) -> setSumOtrosCargos ( 4.00 ); $detail = new SaleDetail (); $detail -> setCodProducto ( 'P001' ) -> setUnidad ( 'NIU' ) -> setDescripcion ( 'PROD 1' ) -> setCantidad ( 2 ) -> setMtoValorUnitario ( 100 ) -> setMtoValorVenta ( 200 ) -> setMtoBaseIgv ( 200 ) -> setPorcentajeIgv ( 18 ) -> setIgv ( 36 ) -> setTipAfeIgv ( '10' ) -> setTotalImpuestos ( 36 ) -> setMtoPrecioUnitario ( 118 ) ; $invoice -> setDetails ([ $detail ]) -> setLegends ([ ( new Legend ()) -> setCode ( '1000' ) -> setValue ( 'SON DOSCIENTOS TREINTA Y SEIS CON OO/100 SOLES' ), ( new Legend ()) -> setCode ( '2000' ) -> setValue ( 'COMPROBANTE DE PERCEPCI\u00d3N' ) ]);","title":"F. Percepci\u00f3n"},{"location":"examples/percepcion/#factura-con-percepcion","text":"Las lineas resaltadas son propias de este modelo de factura.","title":"Factura con Percepci\u00f3n"},{"location":"examples/percepcion/#codigo","text":"<?php use Greenter\\Model\\Sale\\FormaPagos\\FormaPagoContado ; use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Model\\Sale\\Legend ; use Greenter\\Model\\Sale\\SaleDetail ; use Greenter\\Model\\Sale\\SalePerception ; $invoice = new Invoice (); $invoice -> setUblVersion ( '2.1' ) -> setTipoOperacion ( '2001' ) // Percepciones -> setTipoDoc ( '01' ) -> setSerie ( 'F001' ) -> setCorrelativo ( '123' ) -> setFechaEmision ( new \\DateTime ()) -> setFormaPago ( new FormaPagoContado ()) -> setTipoMoneda ( 'PEN' ) -> setClient ( $this -> getClient ()) -> setCompany ( $this -> getCompany ()) -> setMtoOperGravadas ( 200 ) -> setMtoIGV ( 36 ) -> setTotalImpuestos ( 36 ) -> setValorVenta ( 200 ) -> setSubTotal ( 236 ) -> setMtoImpVenta ( 236 ) -> setPerception (( new SalePerception ()) -> setCodReg ( '51' ) -> setPorcentaje ( 0.02 ) -> setMtoBase ( 200 ) -> setMto ( 4.00 ) -> setMtoTotal ( 204.00 ) ) -> setSumOtrosCargos ( 4.00 ); $detail = new SaleDetail (); $detail -> setCodProducto ( 'P001' ) -> setUnidad ( 'NIU' ) -> setDescripcion ( 'PROD 1' ) -> setCantidad ( 2 ) -> setMtoValorUnitario ( 100 ) -> setMtoValorVenta ( 200 ) -> setMtoBaseIgv ( 200 ) -> setPorcentajeIgv ( 18 ) -> setIgv ( 36 ) -> setTipAfeIgv ( '10' ) -> setTotalImpuestos ( 36 ) -> setMtoPrecioUnitario ( 118 ) ; $invoice -> setDetails ([ $detail ]) -> setLegends ([ ( new Legend ()) -> setCode ( '1000' ) -> setValue ( 'SON DOSCIENTOS TREINTA Y SEIS CON OO/100 SOLES' ), ( new Legend ()) -> setCode ( '2000' ) -> setValue ( 'COMPROBANTE DE PERCEPCI\u00d3N' ) ]);","title":"C\u00f3digo"},{"location":"packages/report/","text":"Greenter Report \u00b6 Para elaborar una representaci\u00f3n impresa se dispone de los formatos: HTML y PDF. Instalar \u00b6 composer require greenter/report Documentos \u00b6 Lista de documentos con reporte disponible. Factura Boleta de Venta Nota de Cr\u00e9dito Nota de D\u00e9bito Gu\u00eda de Remisi\u00f3n Comprobante de Retenci\u00f3n Comprobante de Percepci\u00f3n Resumen diario de Boletas Comunicaci\u00f3n de Bajas Resumen diario de Reversiones Uso \u00b6 Este ejemplo se base en el modelo de factura ( Invoice ), para generar un reporte HTML. <?php use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Report\\Resolver\\DefaultTemplateResolver ; use Greenter\\Report\\HtmlReport ; $invoice = new Invoice (); $invoice -> setSerie ( 'F001' ); $invoice -> setCorrelativo ( '1' ); // ... $report = new HtmlReport (); $resolver = new DefaultTemplateResolver (); $report -> setTemplate ( $resolver -> getTemplate ( $invoice )); $params = [ 'system' => [ 'logo' => file_get_contents ( 'logo.png' ), // Logo de Empresa 'hash' => 'qqnr2dN4p/HmaEA/CJuVGo7dv5g=' , // Valor Resumen ], 'user' => [ 'header' => 'Telf: <b>(01) 123375</b>' , // Texto que se ubica debajo de la direcci\u00f3n de empresa 'extras' => [ // Leyendas adicionales [ 'name' => 'CONDICION DE PAGO' , 'value' => 'Efectivo' ], [ 'name' => 'VENDEDOR' , 'value' => 'GITHUB SELLER' ], ], 'footer' => '<p>Nro Resolucion: <b>3232323</b></p>' ] ]; $html = $report -> render ( $invoice , $params ); echo $html ; Personalizar \u00b6 Puedes crear tus propios reportes usando twig , puedes tener como base invoice.html.twig . Necesitas crear un directorio con las nuevas plantillas, en este ejemplo el directorio se llama custom . \u2502 \u251c\u2500/custom/ \u2502 \u251c\u2500 factura.html.twig \u2502 \u251c\u2500 nota-credito.html.twig \u2502 \u2502 Configuraci\u00f3n de HtmlReport . <?php use Greenter\\Report\\HtmlReport ; $twigOptions = [ 'cache' => __DIR__ . '/cache' , 'strict_variables' => true , ]; $report = new HtmlReport ( '/custom' , $twigOptions ); $report -> setTemplate ( 'factura.html.twig' ); $html = $report -> render ( $invoice , $params ); echo $html ; Reporte en PDF \u00b6 Para obtener una representaci\u00f3n en formato PDF, Utilizamos wkhtmltopdf . Instalar \u00b6 composer require greenter/htmltopdf Requerimientos Este paquete require que el ejecutable wkhtmltopdf este descargado o instalado en el host, y que el entorno de PHP permite ejecutar aplicaciones externas, es decir que el m\u00e9todo exec no se encuentre incluido en la configuraci\u00f3n disable_functions del php.ini Puedes seguir este tutorial . Uso \u00b6 PdfReport sigue el patr\u00f3n Decorator , para generar el pdf a partir de HtmlReport o cualquier otra clase que implemente ReportInterface . <?php use Greenter\\Report\\HtmlReport ; use Greenter\\Report\\PdfReport ; use Greenter\\Model\\Sale\\Invoice ; $invoice = new Invoice (); // ... $htmlReport = new HtmlReport (); $html -> setTemplate ( 'invoice.html.twig' ); $report = new PdfReport ( $htmlReport ); // Options: Ver mas en https://wkhtmltopdf.org/usage/wkhtmltopdf.txt $report -> setOptions ( [ 'no-outline' , 'viewport-size' => '1280x1024' , 'page-width' => '21cm' , 'page-height' => '29.7cm' , ]); $report -> setBinPath ( 'wkhtmltopdf.exe' ); // Ruta relativa o absoluta de wkhtmltopdf // Los mismo parametros utilizados en HTML Report $params = [ /*...*/ ]; $pdf = $report -> render ( $invoice , $params ); if ( $pdf === null ) { $error = $report -> getExporter () -> getError (); echo 'Error: ' . $error ; return ; } file_put_contents ( 'invoice.pdf' , $pdf ); Previsualizaci\u00f3n \u00b6","title":"greenter/report"},{"location":"packages/report/#greenter-report","text":"Para elaborar una representaci\u00f3n impresa se dispone de los formatos: HTML y PDF.","title":"Greenter Report"},{"location":"packages/report/#instalar","text":"composer require greenter/report","title":"Instalar"},{"location":"packages/report/#documentos","text":"Lista de documentos con reporte disponible. Factura Boleta de Venta Nota de Cr\u00e9dito Nota de D\u00e9bito Gu\u00eda de Remisi\u00f3n Comprobante de Retenci\u00f3n Comprobante de Percepci\u00f3n Resumen diario de Boletas Comunicaci\u00f3n de Bajas Resumen diario de Reversiones","title":"Documentos"},{"location":"packages/report/#uso","text":"Este ejemplo se base en el modelo de factura ( Invoice ), para generar un reporte HTML. <?php use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Report\\Resolver\\DefaultTemplateResolver ; use Greenter\\Report\\HtmlReport ; $invoice = new Invoice (); $invoice -> setSerie ( 'F001' ); $invoice -> setCorrelativo ( '1' ); // ... $report = new HtmlReport (); $resolver = new DefaultTemplateResolver (); $report -> setTemplate ( $resolver -> getTemplate ( $invoice )); $params = [ 'system' => [ 'logo' => file_get_contents ( 'logo.png' ), // Logo de Empresa 'hash' => 'qqnr2dN4p/HmaEA/CJuVGo7dv5g=' , // Valor Resumen ], 'user' => [ 'header' => 'Telf: <b>(01) 123375</b>' , // Texto que se ubica debajo de la direcci\u00f3n de empresa 'extras' => [ // Leyendas adicionales [ 'name' => 'CONDICION DE PAGO' , 'value' => 'Efectivo' ], [ 'name' => 'VENDEDOR' , 'value' => 'GITHUB SELLER' ], ], 'footer' => '<p>Nro Resolucion: <b>3232323</b></p>' ] ]; $html = $report -> render ( $invoice , $params ); echo $html ;","title":"Uso"},{"location":"packages/report/#personalizar","text":"Puedes crear tus propios reportes usando twig , puedes tener como base invoice.html.twig . Necesitas crear un directorio con las nuevas plantillas, en este ejemplo el directorio se llama custom . \u2502 \u251c\u2500/custom/ \u2502 \u251c\u2500 factura.html.twig \u2502 \u251c\u2500 nota-credito.html.twig \u2502 \u2502 Configuraci\u00f3n de HtmlReport . <?php use Greenter\\Report\\HtmlReport ; $twigOptions = [ 'cache' => __DIR__ . '/cache' , 'strict_variables' => true , ]; $report = new HtmlReport ( '/custom' , $twigOptions ); $report -> setTemplate ( 'factura.html.twig' ); $html = $report -> render ( $invoice , $params ); echo $html ;","title":"Personalizar"},{"location":"packages/report/#reporte-en-pdf","text":"Para obtener una representaci\u00f3n en formato PDF, Utilizamos wkhtmltopdf .","title":"Reporte en PDF"},{"location":"packages/report/#instalar_1","text":"composer require greenter/htmltopdf Requerimientos Este paquete require que el ejecutable wkhtmltopdf este descargado o instalado en el host, y que el entorno de PHP permite ejecutar aplicaciones externas, es decir que el m\u00e9todo exec no se encuentre incluido en la configuraci\u00f3n disable_functions del php.ini Puedes seguir este tutorial .","title":"Instalar"},{"location":"packages/report/#uso_1","text":"PdfReport sigue el patr\u00f3n Decorator , para generar el pdf a partir de HtmlReport o cualquier otra clase que implemente ReportInterface . <?php use Greenter\\Report\\HtmlReport ; use Greenter\\Report\\PdfReport ; use Greenter\\Model\\Sale\\Invoice ; $invoice = new Invoice (); // ... $htmlReport = new HtmlReport (); $html -> setTemplate ( 'invoice.html.twig' ); $report = new PdfReport ( $htmlReport ); // Options: Ver mas en https://wkhtmltopdf.org/usage/wkhtmltopdf.txt $report -> setOptions ( [ 'no-outline' , 'viewport-size' => '1280x1024' , 'page-width' => '21cm' , 'page-height' => '29.7cm' , ]); $report -> setBinPath ( 'wkhtmltopdf.exe' ); // Ruta relativa o absoluta de wkhtmltopdf // Los mismo parametros utilizados en HTML Report $params = [ /*...*/ ]; $pdf = $report -> render ( $invoice , $params ); if ( $pdf === null ) { $error = $report -> getExporter () -> getError (); echo 'Error: ' . $error ; return ; } file_put_contents ( 'invoice.pdf' , $pdf );","title":"Uso"},{"location":"packages/report/#previsualizacion","text":"","title":"Previsualizaci\u00f3n"},{"location":"packages/sign/","text":"Greener XMLDsig \u00b6 Esta libreria permite realizar la firma digital de los documentos XML con un certificado electr\u00f3nico, siguiendo la normativa de SUNAT. Instalar \u00b6 composer require greenter/xmldsig Requerimientos Se necesitar tener habilitado la extension openssl en php.ini extension = openssl Uso \u00b6 Para este ejemplo necesitamos un archivo XML previamente generado, debemos asegurarnos de incluir la etiqueta <ext:ExtensionContent/> , que es donde se agregar\u00e1 el nodod de la firma. <?php use Greenter\\XMLSecLibs\\Sunat\\SignedXml ; $xml = file_get_contents ( '20600995805-01-F001-1.xml' ); $cert = file_get_contents ( 'certifcate.pem' ); $signer = new SignedXml (); $signer -> setCertificate ( $cert ); $xmlSigned = $signer -> signXml ( $xml ); file_put_contents ( \"signed.xml\" , $xmlSigned ); El resultado seria: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <Invoice xmlns= \"urn:oasis:names:specification:ubl:schema:xsd:Invoice-2\" xmlns:cac= \"urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2\" xmlns:cbc= \"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2\" xmlns:ds= \"http://www.w3.org/2000/09/xmldsig#\" xmlns:ext= \"urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2\" > <ext:UBLExtensions> <ext:UBLExtension> <ext:ExtensionContent> <ds:Signature Id= \"SignIMM\" > <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\" /> <ds:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference URI= \"\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue> IwJuNQGQaHmmm3iv2jj8JDv70Ow= </ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue> nLaghokzMNrmrfPnbIg9b...WluZTE1UiLFwZXXXPUlf2o= </ds:SignatureValue> <ds:KeyInfo> <ds:X509Data> <ds:X509Certificate> MIIFhzCCA3OgAwI...BgNVBAYTAlVTVQQIEwVNYWluZTEgMOiRJ00nE= </ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> </ds:Signature> </ext:ExtensionContent> </ext:UBLExtension> </ext:UBLExtensions> <cbc:UBLVersionID> 2.1 </cbc:UBLVersionID> <cbc:CustomizationID> 2.0 </cbc:CustomizationID> <cbc:ID> F001-1 </cbc:ID> <!--....--> </Invoice> Datos a considerar: <ds:DigestValue> : Valor Resumen codificado en base64 , utilizado en la representaci\u00f3n impresa y codigo QR. <ds:SignatureValue> : Valor de la Firma codificado en base64 . <ds:X509Certificate> : Contenido del certificado, necesario para verificar la autenticidad del documento. Otros formatos de certificado Puedes seguir esta gu\u00eda , para convertir un certificado al formato requerido.","title":"greenter/xmldsig"},{"location":"packages/sign/#greener-xmldsig","text":"Esta libreria permite realizar la firma digital de los documentos XML con un certificado electr\u00f3nico, siguiendo la normativa de SUNAT.","title":"Greener XMLDsig"},{"location":"packages/sign/#instalar","text":"composer require greenter/xmldsig Requerimientos Se necesitar tener habilitado la extension openssl en php.ini extension = openssl","title":"Instalar"},{"location":"packages/sign/#uso","text":"Para este ejemplo necesitamos un archivo XML previamente generado, debemos asegurarnos de incluir la etiqueta <ext:ExtensionContent/> , que es donde se agregar\u00e1 el nodod de la firma. <?php use Greenter\\XMLSecLibs\\Sunat\\SignedXml ; $xml = file_get_contents ( '20600995805-01-F001-1.xml' ); $cert = file_get_contents ( 'certifcate.pem' ); $signer = new SignedXml (); $signer -> setCertificate ( $cert ); $xmlSigned = $signer -> signXml ( $xml ); file_put_contents ( \"signed.xml\" , $xmlSigned ); El resultado seria: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <Invoice xmlns= \"urn:oasis:names:specification:ubl:schema:xsd:Invoice-2\" xmlns:cac= \"urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2\" xmlns:cbc= \"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2\" xmlns:ds= \"http://www.w3.org/2000/09/xmldsig#\" xmlns:ext= \"urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2\" > <ext:UBLExtensions> <ext:UBLExtension> <ext:ExtensionContent> <ds:Signature Id= \"SignIMM\" > <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\" /> <ds:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference URI= \"\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue> IwJuNQGQaHmmm3iv2jj8JDv70Ow= </ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue> nLaghokzMNrmrfPnbIg9b...WluZTE1UiLFwZXXXPUlf2o= </ds:SignatureValue> <ds:KeyInfo> <ds:X509Data> <ds:X509Certificate> MIIFhzCCA3OgAwI...BgNVBAYTAlVTVQQIEwVNYWluZTEgMOiRJ00nE= </ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> </ds:Signature> </ext:ExtensionContent> </ext:UBLExtension> </ext:UBLExtensions> <cbc:UBLVersionID> 2.1 </cbc:UBLVersionID> <cbc:CustomizationID> 2.0 </cbc:CustomizationID> <cbc:ID> F001-1 </cbc:ID> <!--....--> </Invoice> Datos a considerar: <ds:DigestValue> : Valor Resumen codificado en base64 , utilizado en la representaci\u00f3n impresa y codigo QR. <ds:SignatureValue> : Valor de la Firma codificado en base64 . <ds:X509Certificate> : Contenido del certificado, necesario para verificar la autenticidad del documento. Otros formatos de certificado Puedes seguir esta gu\u00eda , para convertir un certificado al formato requerido.","title":"Uso"},{"location":"packages/ws/","text":"Greenter WebServices \u00b6 Esta libreria permite establecer la conexi\u00f3n con los servicios de SUNAT, para realizar la comunicaci\u00f3n de los comprobantes electr\u00f3nicos emitidos. Internamente la libreria comprime los comprobantes (archivos XML) antes de enviarlo a SUNAT bajo el protocolo SOAP , despues de recibir el comprobante de recepci\u00f3n (CDR) extrae la respuesta para saber el estado del comprobante (Aprobado, Rechazado, Observaciones). Instalar \u00b6 composer require greenter/ws Requerimientos Se necesitar tener habilitado las extensiones soap en php.ini extension = soap extension = fileinfo Uso \u00b6 Para este ejemplo necesitamos un documento XML firmado, y para autenticarnos en los servicios de SUNAT, la clave SOL, que para los servicios BETA son: User: 20000000001MODDATOS (ruc + usuario SOL) Password: moddatos <?php use Greenter\\Ws\\Services\\SoapClient ; use Greenter\\Ws\\Services\\BillSender ; require 'vendor/autoload.php' ; // URL del servicio para Facturas (BETA \u00f3 PRODUCCION). $urlService = 'https://e-beta.sunat.gob.pe/ol-ti-itcpfegem-beta/billService' ; $soap = new SoapClient (); $soap -> setService ( $urlService ); $soap -> setCredentials ( '20000000001MODDATOS' , 'moddatos' ); $sender = new BillSender (); $sender -> setClient ( $soap ); $xml = file_get_contents ( 'factura.xml' ); $result = $sender -> send ( '20000000001-01-F001-1' , $xml ); if ( ! $result -> isSuccess ()) { // Error en la conexion con el servicio de SUNAT var_dump ( $result -> getError ()); return ; } $cdr = $result -> getCdrResponse (); file_put_contents ( 'R-20000000001-01-F001-1.zip' , $result -> getCdrZip ()); // Verificar CDR (Factura aceptada o rechazada) $code = ( int ) $cdr -> getCode (); if ( $code === 0 ) { echo 'ESTADO: ACEPTADA' . PHP_EOL ; if ( count ( $cdr -> getNotes ()) > 0 ) { echo 'INCLUYE OBSERVACIONES:' . PHP_EOL ; // Mostrar observaciones foreach ( $cdr -> getNotes () as $obs ) { echo 'OBS: ' . $obs . PHP_EOL ; } } } else if ( $code >= 2000 && $code <= 3999 ) { echo 'ESTADO: RECHAZADA' . PHP_EOL ; } else { /* Esto no deber\u00eda darse, pero si ocurre, es un CDR inv\u00e1lido que deber\u00eda tratarse como un error-excepci\u00f3n. */ /*code: 0100 a 1999 */ echo 'Excepci\u00f3n' ; } echo $cdr -> getDescription () . PHP_EOL ; Esta es una referencia de las clases a utilizar segun el tipo de comprobante. BillSender Factura Boleta de Venta Notas de Cr\u00e9dito Notas de D\u00e9bito Comprobante de Percepci\u00f3n Comprobante de Retenci\u00f3n SummarySender Resumen Diario de Boletas Comunicaci\u00f3n de Baja Resumen de Reversiones (dar de baja C. de Percepci\u00f3n y Retenci\u00f3n) Resumen diario \u00b6 El resumen diario tiene un proceso diferente al de las facturas, se tiene que realizar una segunda petici\u00f3n al servicio, para obtener la respuesta de un resumen diario previamente enviado. En el envio inicial, SUNAT nos retorna un n\u00famero de Ticket que es el que usaremos para consultar el estado. <?php use Greenter\\Ws\\Services\\SoapClient ; use Greenter\\Ws\\Services\\SummarySender ; require 'vendor/autoload.php' ; // URL del servicio, el mismo de Facturas. $urlService = 'https://e-beta.sunat.gob.pe/ol-ti-itcpfegem-beta/billService' ; $soap = new SoapClient (); $soap -> setService ( $urlService ); $soap -> setCredentials ( '20000000001MODDATOS' , 'moddatos' ); $sender = new SummarySender (); $sender -> setClient ( $soap ); $xml = file_get_contents ( 'resumen.xml' ); $result = $sender -> send ( '20000000001-RC-20200728-1' , $xml ); if ( ! $result -> isSuccess ()) { // Error en la conexion con el servicio de SUNAT var_dump ( $result -> getError ()); return ; } // Guardar el ticket en el sistema, servira para consultar el estado del documento. $ticket = $result -> getTicket (); echo $ticket ; Consultar el estado del documento enviado (Resumen diario, C. de Baja, R. Reversion). <?php use Greenter\\Ws\\Services\\SoapClient ; use Greenter\\Ws\\Services\\ExtService ; require 'vendor/autoload.php' ; // N\u00famero de ticket obtenido en el paso anterior. $ticket = '1599432082640' ; // URL del servicio. $urlService = 'https://e-beta.sunat.gob.pe/ol-ti-itcpfegem-beta/billService' ; $soap = new SoapClient (); $soap -> setService ( $urlService ); $soap -> setCredentials ( '20000000001MODDATOS' , 'moddatos' ); $statusService = new ExtService (); $statusService -> setClient ( $soap ); $status = $statusService -> getStatus ( $ticket ); if ( ! $status -> isSuccess ()) { // Error en la conexion con el servicio de SUNAT var_dump ( $status ); return ; } $cdr = $status -> getCdrResponse (); file_put_contents ( 'R-20000000001-RC-20200728-1.zip' , $status -> getCdrZip ()); var_dump ( $cdr ); // Verificar CDR (Resumen aceptado o rechazado) $code = ( int ) $cdr -> getCode (); if ( $code === 0 ) { echo 'ESTADO: ACEPTADA' . PHP_EOL ; if ( count ( $cdr -> getNotes ()) > 0 ) { echo 'INCLUYE OBSERVACIONES:' . PHP_EOL ; // Mostrar observaciones foreach ( $cdr -> getNotes () as $obs ) { echo 'OBS: ' . $obs . PHP_EOL ; } } } else if ( $code >= 2000 && $code <= 3999 ) { echo 'ESTADO: RECHAZADA' . PHP_EOL ; } else { /* Esto no deber\u00eda darse, pero si ocurre, es un CDR inv\u00e1lido que deber\u00eda tratarse como un error-excepci\u00f3n. */ /*code: 0100 a 1999 */ echo 'Excepci\u00f3n' ; } Comunicaci\u00f3n de Baja La comunicaci\u00f3n de baja y resumen de reversi\u00f3n siguen el mismo proceso. Consulta CDR \u00b6 Si por alg\u00fan motivo no disponemos del CDR , lo podemos volver a obtener consultando al servicio de SUNAT, pero tener en cuenta que solo es posible en Producci\u00f3n y solo esta disponible para Facturas y Notas de Cr\u00e9dito/D\u00e9bito relacionada a facturas. <?php use Greenter\\Ws\\Services\\ConsultCdrService ; use Greenter\\Ws\\Services\\SoapClient ; require 'vendor/autoload.php' ; // URL CDR de Producci\u00f3n $wsdlUrl = 'https://e-factura.sunat.gob.pe/ol-it-wsconscpegem/billConsultService?wsdl' ; $soap = new SoapClient ( $wsdlUrl ); $soap -> setCredentials ( '20000000001MODDATOS' , 'moddatos' ); $service = new ConsultCdrService (); $service -> setClient ( $soap ); $rucEmisor = '20000000001' ; $tipoDocumento = '01' ; // 01: Factura, 07: Nota de Cr\u00e9dito, 08: Nota de D\u00e9bito $serie = 'F001' ; $correlativo = '1' ; $result = $service -> getStatusCdr ( $rucEmisor , $tipoDocumento , $serie , $correlativo ); if ( ! $result -> isSuccess ()) { var_dump ( $result -> getError ()); return ; } $cdr = $result -> getCdrResponse (); if ( $cdr === null ) { echo 'CDR no encontrado, el comprobante no ha sido comunicado a SUNAT.' ; return ; } file_put_contents ( 'R-20000000001-01-F001-1.zip' , $result -> getCdrZip ()); var_dump ( $cdr ); Servicios \u00b6 SUNAT dispone de servicios de prueba ( BETA ) y de producci\u00f3n para los diferentes tipos de comprobantes electr\u00f3nicos. BETA Servicio Ruta Factura https://e-beta.sunat.gob.pe/ol-ti-itcpfegem-beta/billService?wsdl Guia https://e-beta.sunat.gob.pe/ol-ti-itemision-guia-gem-beta/billService?wsdl Retenci\u00f3n y Percepci\u00f3n https://e-beta.sunat.gob.pe/ol-ti-itemision-otroscpe-gem-beta/billService?wsdl Producci\u00f3n Servicio Ruta Factura https://e-factura.sunat.gob.pe/ol-ti-itcpfegem/billService?wsdl Guia https://e-guiaremision.sunat.gob.pe/ol-ti-itemision-guia-gem/billService?wsdl Retenci\u00f3n y Percepci\u00f3n https://e-factura.sunat.gob.pe/ol-ti-itemision-otroscpe-gem/billService?wsdl Consulta CDR https://e-factura.sunat.gob.pe/ol-it-wsconscpegem/billConsultService?wsdl","title":"greenter/ws"},{"location":"packages/ws/#greenter-webservices","text":"Esta libreria permite establecer la conexi\u00f3n con los servicios de SUNAT, para realizar la comunicaci\u00f3n de los comprobantes electr\u00f3nicos emitidos. Internamente la libreria comprime los comprobantes (archivos XML) antes de enviarlo a SUNAT bajo el protocolo SOAP , despues de recibir el comprobante de recepci\u00f3n (CDR) extrae la respuesta para saber el estado del comprobante (Aprobado, Rechazado, Observaciones).","title":"Greenter WebServices"},{"location":"packages/ws/#instalar","text":"composer require greenter/ws Requerimientos Se necesitar tener habilitado las extensiones soap en php.ini extension = soap extension = fileinfo","title":"Instalar"},{"location":"packages/ws/#uso","text":"Para este ejemplo necesitamos un documento XML firmado, y para autenticarnos en los servicios de SUNAT, la clave SOL, que para los servicios BETA son: User: 20000000001MODDATOS (ruc + usuario SOL) Password: moddatos <?php use Greenter\\Ws\\Services\\SoapClient ; use Greenter\\Ws\\Services\\BillSender ; require 'vendor/autoload.php' ; // URL del servicio para Facturas (BETA \u00f3 PRODUCCION). $urlService = 'https://e-beta.sunat.gob.pe/ol-ti-itcpfegem-beta/billService' ; $soap = new SoapClient (); $soap -> setService ( $urlService ); $soap -> setCredentials ( '20000000001MODDATOS' , 'moddatos' ); $sender = new BillSender (); $sender -> setClient ( $soap ); $xml = file_get_contents ( 'factura.xml' ); $result = $sender -> send ( '20000000001-01-F001-1' , $xml ); if ( ! $result -> isSuccess ()) { // Error en la conexion con el servicio de SUNAT var_dump ( $result -> getError ()); return ; } $cdr = $result -> getCdrResponse (); file_put_contents ( 'R-20000000001-01-F001-1.zip' , $result -> getCdrZip ()); // Verificar CDR (Factura aceptada o rechazada) $code = ( int ) $cdr -> getCode (); if ( $code === 0 ) { echo 'ESTADO: ACEPTADA' . PHP_EOL ; if ( count ( $cdr -> getNotes ()) > 0 ) { echo 'INCLUYE OBSERVACIONES:' . PHP_EOL ; // Mostrar observaciones foreach ( $cdr -> getNotes () as $obs ) { echo 'OBS: ' . $obs . PHP_EOL ; } } } else if ( $code >= 2000 && $code <= 3999 ) { echo 'ESTADO: RECHAZADA' . PHP_EOL ; } else { /* Esto no deber\u00eda darse, pero si ocurre, es un CDR inv\u00e1lido que deber\u00eda tratarse como un error-excepci\u00f3n. */ /*code: 0100 a 1999 */ echo 'Excepci\u00f3n' ; } echo $cdr -> getDescription () . PHP_EOL ; Esta es una referencia de las clases a utilizar segun el tipo de comprobante. BillSender Factura Boleta de Venta Notas de Cr\u00e9dito Notas de D\u00e9bito Comprobante de Percepci\u00f3n Comprobante de Retenci\u00f3n SummarySender Resumen Diario de Boletas Comunicaci\u00f3n de Baja Resumen de Reversiones (dar de baja C. de Percepci\u00f3n y Retenci\u00f3n)","title":"Uso"},{"location":"packages/ws/#resumen-diario","text":"El resumen diario tiene un proceso diferente al de las facturas, se tiene que realizar una segunda petici\u00f3n al servicio, para obtener la respuesta de un resumen diario previamente enviado. En el envio inicial, SUNAT nos retorna un n\u00famero de Ticket que es el que usaremos para consultar el estado. <?php use Greenter\\Ws\\Services\\SoapClient ; use Greenter\\Ws\\Services\\SummarySender ; require 'vendor/autoload.php' ; // URL del servicio, el mismo de Facturas. $urlService = 'https://e-beta.sunat.gob.pe/ol-ti-itcpfegem-beta/billService' ; $soap = new SoapClient (); $soap -> setService ( $urlService ); $soap -> setCredentials ( '20000000001MODDATOS' , 'moddatos' ); $sender = new SummarySender (); $sender -> setClient ( $soap ); $xml = file_get_contents ( 'resumen.xml' ); $result = $sender -> send ( '20000000001-RC-20200728-1' , $xml ); if ( ! $result -> isSuccess ()) { // Error en la conexion con el servicio de SUNAT var_dump ( $result -> getError ()); return ; } // Guardar el ticket en el sistema, servira para consultar el estado del documento. $ticket = $result -> getTicket (); echo $ticket ; Consultar el estado del documento enviado (Resumen diario, C. de Baja, R. Reversion). <?php use Greenter\\Ws\\Services\\SoapClient ; use Greenter\\Ws\\Services\\ExtService ; require 'vendor/autoload.php' ; // N\u00famero de ticket obtenido en el paso anterior. $ticket = '1599432082640' ; // URL del servicio. $urlService = 'https://e-beta.sunat.gob.pe/ol-ti-itcpfegem-beta/billService' ; $soap = new SoapClient (); $soap -> setService ( $urlService ); $soap -> setCredentials ( '20000000001MODDATOS' , 'moddatos' ); $statusService = new ExtService (); $statusService -> setClient ( $soap ); $status = $statusService -> getStatus ( $ticket ); if ( ! $status -> isSuccess ()) { // Error en la conexion con el servicio de SUNAT var_dump ( $status ); return ; } $cdr = $status -> getCdrResponse (); file_put_contents ( 'R-20000000001-RC-20200728-1.zip' , $status -> getCdrZip ()); var_dump ( $cdr ); // Verificar CDR (Resumen aceptado o rechazado) $code = ( int ) $cdr -> getCode (); if ( $code === 0 ) { echo 'ESTADO: ACEPTADA' . PHP_EOL ; if ( count ( $cdr -> getNotes ()) > 0 ) { echo 'INCLUYE OBSERVACIONES:' . PHP_EOL ; // Mostrar observaciones foreach ( $cdr -> getNotes () as $obs ) { echo 'OBS: ' . $obs . PHP_EOL ; } } } else if ( $code >= 2000 && $code <= 3999 ) { echo 'ESTADO: RECHAZADA' . PHP_EOL ; } else { /* Esto no deber\u00eda darse, pero si ocurre, es un CDR inv\u00e1lido que deber\u00eda tratarse como un error-excepci\u00f3n. */ /*code: 0100 a 1999 */ echo 'Excepci\u00f3n' ; } Comunicaci\u00f3n de Baja La comunicaci\u00f3n de baja y resumen de reversi\u00f3n siguen el mismo proceso.","title":"Resumen diario"},{"location":"packages/ws/#consulta-cdr","text":"Si por alg\u00fan motivo no disponemos del CDR , lo podemos volver a obtener consultando al servicio de SUNAT, pero tener en cuenta que solo es posible en Producci\u00f3n y solo esta disponible para Facturas y Notas de Cr\u00e9dito/D\u00e9bito relacionada a facturas. <?php use Greenter\\Ws\\Services\\ConsultCdrService ; use Greenter\\Ws\\Services\\SoapClient ; require 'vendor/autoload.php' ; // URL CDR de Producci\u00f3n $wsdlUrl = 'https://e-factura.sunat.gob.pe/ol-it-wsconscpegem/billConsultService?wsdl' ; $soap = new SoapClient ( $wsdlUrl ); $soap -> setCredentials ( '20000000001MODDATOS' , 'moddatos' ); $service = new ConsultCdrService (); $service -> setClient ( $soap ); $rucEmisor = '20000000001' ; $tipoDocumento = '01' ; // 01: Factura, 07: Nota de Cr\u00e9dito, 08: Nota de D\u00e9bito $serie = 'F001' ; $correlativo = '1' ; $result = $service -> getStatusCdr ( $rucEmisor , $tipoDocumento , $serie , $correlativo ); if ( ! $result -> isSuccess ()) { var_dump ( $result -> getError ()); return ; } $cdr = $result -> getCdrResponse (); if ( $cdr === null ) { echo 'CDR no encontrado, el comprobante no ha sido comunicado a SUNAT.' ; return ; } file_put_contents ( 'R-20000000001-01-F001-1.zip' , $result -> getCdrZip ()); var_dump ( $cdr );","title":"Consulta CDR"},{"location":"packages/ws/#servicios","text":"SUNAT dispone de servicios de prueba ( BETA ) y de producci\u00f3n para los diferentes tipos de comprobantes electr\u00f3nicos. BETA Servicio Ruta Factura https://e-beta.sunat.gob.pe/ol-ti-itcpfegem-beta/billService?wsdl Guia https://e-beta.sunat.gob.pe/ol-ti-itemision-guia-gem-beta/billService?wsdl Retenci\u00f3n y Percepci\u00f3n https://e-beta.sunat.gob.pe/ol-ti-itemision-otroscpe-gem-beta/billService?wsdl Producci\u00f3n Servicio Ruta Factura https://e-factura.sunat.gob.pe/ol-ti-itcpfegem/billService?wsdl Guia https://e-guiaremision.sunat.gob.pe/ol-ti-itemision-guia-gem/billService?wsdl Retenci\u00f3n y Percepci\u00f3n https://e-factura.sunat.gob.pe/ol-ti-itemision-otroscpe-gem/billService?wsdl Consulta CDR https://e-factura.sunat.gob.pe/ol-it-wsconscpegem/billConsultService?wsdl","title":"Servicios"},{"location":"packages/xml-parser/","text":"Grenter XML Parser \u00b6 Esta libreria permite crear objetos PHP a partir de documentos XML. UBL 2.1 Actualmente solo esta implementada la versi\u00f3n UBL 2.0 , a\u00fan esta pendiente la implementaci\u00f3n de la versi\u00f3n UBL 2.1 . Instalar \u00b6 composer require greenter/xml-parser Documentos \u00b6 Los documentos disponibles en este paquete son: Documento UBL Parser Comprobante Invoice InvoiceParser Factura, Boleta de venta CreditNote NoteParser Nota de Cr\u00e9dito DebitNote NoteParser Nota de D\u00e9bito Summary SummaryParser Resumen diario Voided VoidedParser Comunicaci\u00f3n de Baja, Reversion Despatch DespatchParser Gu\u00eda de Remisi\u00f3n Retention RetentionParser Retenci\u00f3n Perception PerceptionParser Percepci\u00f3n Uso \u00b6 Los archivo XML ser\u00e1n convertidos a modelos de documentos disponibles en greenter/core , los cuales implementan DocumentInterface . <?php use Greenter\\Xml\\Parser\\InvoiceParser ; use Greenter\\Xml\\Parser\\PerceptionParser ; require 'vendor/autoload.php' ; $parser = new InvoiceParser (); $xml = file_get_contents ( '20000000001-01-F001-1.xml' ); $factura = $parser -> parse ( $xml ); var_dump ( $factura ); $parser = new InvoiceParser (); $xml = file_get_contents ( '20000000001-03-B001-1.xml' ); $boleta = $parser -> parse ( $xml ); var_dump ( $boleta ); $parser = new PerceptionParser (); $xml = file_get_contents ( '20000000001-40-P001-1.xml' ); $percepcion = $parser -> parse ( $xml ); var_dump ( $percepcion ); Tambi\u00e9n puedes crear tu propia versi\u00f3n, implementando DocumentParserInterface . <?php namespace Greenter\\Parser ; interface DocumentParserInterface { /** * @param \\DomDocument|string $value * * @return DocumentInterface */ public function parse ( $value ) : DocumentInterface ; }","title":"greenter/xml-parser"},{"location":"packages/xml-parser/#grenter-xml-parser","text":"Esta libreria permite crear objetos PHP a partir de documentos XML. UBL 2.1 Actualmente solo esta implementada la versi\u00f3n UBL 2.0 , a\u00fan esta pendiente la implementaci\u00f3n de la versi\u00f3n UBL 2.1 .","title":"Grenter XML Parser"},{"location":"packages/xml-parser/#instalar","text":"composer require greenter/xml-parser","title":"Instalar"},{"location":"packages/xml-parser/#documentos","text":"Los documentos disponibles en este paquete son: Documento UBL Parser Comprobante Invoice InvoiceParser Factura, Boleta de venta CreditNote NoteParser Nota de Cr\u00e9dito DebitNote NoteParser Nota de D\u00e9bito Summary SummaryParser Resumen diario Voided VoidedParser Comunicaci\u00f3n de Baja, Reversion Despatch DespatchParser Gu\u00eda de Remisi\u00f3n Retention RetentionParser Retenci\u00f3n Perception PerceptionParser Percepci\u00f3n","title":"Documentos"},{"location":"packages/xml-parser/#uso","text":"Los archivo XML ser\u00e1n convertidos a modelos de documentos disponibles en greenter/core , los cuales implementan DocumentInterface . <?php use Greenter\\Xml\\Parser\\InvoiceParser ; use Greenter\\Xml\\Parser\\PerceptionParser ; require 'vendor/autoload.php' ; $parser = new InvoiceParser (); $xml = file_get_contents ( '20000000001-01-F001-1.xml' ); $factura = $parser -> parse ( $xml ); var_dump ( $factura ); $parser = new InvoiceParser (); $xml = file_get_contents ( '20000000001-03-B001-1.xml' ); $boleta = $parser -> parse ( $xml ); var_dump ( $boleta ); $parser = new PerceptionParser (); $xml = file_get_contents ( '20000000001-40-P001-1.xml' ); $percepcion = $parser -> parse ( $xml ); var_dump ( $percepcion ); Tambi\u00e9n puedes crear tu propia versi\u00f3n, implementando DocumentParserInterface . <?php namespace Greenter\\Parser ; interface DocumentParserInterface { /** * @param \\DomDocument|string $value * * @return DocumentInterface */ public function parse ( $value ) : DocumentInterface ; }","title":"Uso"},{"location":"packages/xml/","text":"Grenter XML \u00b6 Esta libreria permite generar documentos XML siguiendo el est\u00e1ndar UBL 2.0 y 2.1, ademas de considerar las normas establecidas por SUNAT. UBL 2.0 No usar la versi\u00f3n 2.0 para generar Facturas, Boletas, Notas de Cr\u00e9dito, Notas de D\u00e9bito, ya que SUNAT actualmente exige utilizar la versi\u00f3n UBL 2.1 . Instalar \u00b6 composer require greenter/xml Documentos \u00b6 Los documentos disponibles en este paquete son: Documento UBL Builder Comprobante Invoice InvoiceBuilder Factura, Boleta de Venta CreditNote NoteBuilder Nota de Cr\u00e9dito DebitNote NoteBuilder Nota de D\u00e9bito Summary SummaryBuilder Resumen diario Voided VoidedBuilder Comunicaci\u00f3n de Baja, Reversion Despatch DespatchBuilder Gu\u00eda de Remisi\u00f3n Retention RetentionBuilder Retenci\u00f3n Perception PerceptionBuilder Percepci\u00f3n Uso \u00b6 Para generar el archivo XML nos basamos en modelos de documentos disponibles en greenter/core , los cuales implementan DocumentInterface . Para una factura el modelo a utilizar es Invoice , y para generar el XML debemos usar InvoiceBuilder . <?php use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Xml\\Builder\\InvoiceBuilder ; $invoice = new Invoice (); $invoice -> setSerie ( 'F001' ); $invoice -> setCorrelativo ( '1' ); // ... $builder = new InvoiceBuilder (); $xml = $builder -> build ( $invoice ); echo $xml ; Tener en cuenta que esto solo crea el XML pero no realiza la firma, para ello utilizar greenter/xmldsig . El siguiente fragmento es una previsualizaci\u00f3n del resultado: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <Invoice xmlns= \"urn:oasis:names:specification:ubl:schema:xsd:Invoice-2\" xmlns:cac= \"urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2\" xmlns:cbc= \"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2\" xmlns:ds= \"http://www.w3.org/2000/09/xmldsig#\" xmlns:ext= \"urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2\" > <ext:UBLExtensions> <ext:UBLExtension> <ext:ExtensionContent> </ext:ExtensionContent> </ext:UBLExtension> </ext:UBLExtensions> <cbc:UBLVersionID> 2.1 </cbc:UBLVersionID> <cbc:CustomizationID> 2.0 </cbc:CustomizationID> <cbc:ID> F001-1 </cbc:ID> <!--....--> </Invoice> Avanzado \u00b6 Esta libreria para generar los XML emplea el motor de plantillas twig , si necesitas cambiar algunos parametros puedes hacerlo desde el constructor. Ejemplo <?php use Greenter\\Xml\\Builder\\InvoiceBuilder ; $options = [ 'cache' => '/tmp/compilation_cache' ]; $builder = new InvoiceBuilder ( $options ); Tambi\u00e9n puedes crear tu propia versi\u00f3n, implementando BuilderInterface .","title":"greenter/xml"},{"location":"packages/xml/#grenter-xml","text":"Esta libreria permite generar documentos XML siguiendo el est\u00e1ndar UBL 2.0 y 2.1, ademas de considerar las normas establecidas por SUNAT. UBL 2.0 No usar la versi\u00f3n 2.0 para generar Facturas, Boletas, Notas de Cr\u00e9dito, Notas de D\u00e9bito, ya que SUNAT actualmente exige utilizar la versi\u00f3n UBL 2.1 .","title":"Grenter XML"},{"location":"packages/xml/#instalar","text":"composer require greenter/xml","title":"Instalar"},{"location":"packages/xml/#documentos","text":"Los documentos disponibles en este paquete son: Documento UBL Builder Comprobante Invoice InvoiceBuilder Factura, Boleta de Venta CreditNote NoteBuilder Nota de Cr\u00e9dito DebitNote NoteBuilder Nota de D\u00e9bito Summary SummaryBuilder Resumen diario Voided VoidedBuilder Comunicaci\u00f3n de Baja, Reversion Despatch DespatchBuilder Gu\u00eda de Remisi\u00f3n Retention RetentionBuilder Retenci\u00f3n Perception PerceptionBuilder Percepci\u00f3n","title":"Documentos"},{"location":"packages/xml/#uso","text":"Para generar el archivo XML nos basamos en modelos de documentos disponibles en greenter/core , los cuales implementan DocumentInterface . Para una factura el modelo a utilizar es Invoice , y para generar el XML debemos usar InvoiceBuilder . <?php use Greenter\\Model\\Sale\\Invoice ; use Greenter\\Xml\\Builder\\InvoiceBuilder ; $invoice = new Invoice (); $invoice -> setSerie ( 'F001' ); $invoice -> setCorrelativo ( '1' ); // ... $builder = new InvoiceBuilder (); $xml = $builder -> build ( $invoice ); echo $xml ; Tener en cuenta que esto solo crea el XML pero no realiza la firma, para ello utilizar greenter/xmldsig . El siguiente fragmento es una previsualizaci\u00f3n del resultado: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <Invoice xmlns= \"urn:oasis:names:specification:ubl:schema:xsd:Invoice-2\" xmlns:cac= \"urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2\" xmlns:cbc= \"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2\" xmlns:ds= \"http://www.w3.org/2000/09/xmldsig#\" xmlns:ext= \"urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2\" > <ext:UBLExtensions> <ext:UBLExtension> <ext:ExtensionContent> </ext:ExtensionContent> </ext:UBLExtension> </ext:UBLExtensions> <cbc:UBLVersionID> 2.1 </cbc:UBLVersionID> <cbc:CustomizationID> 2.0 </cbc:CustomizationID> <cbc:ID> F001-1 </cbc:ID> <!--....--> </Invoice>","title":"Uso"},{"location":"packages/xml/#avanzado","text":"Esta libreria para generar los XML emplea el motor de plantillas twig , si necesitas cambiar algunos parametros puedes hacerlo desde el constructor. Ejemplo <?php use Greenter\\Xml\\Builder\\InvoiceBuilder ; $options = [ 'cache' => '/tmp/compilation_cache' ]; $builder = new InvoiceBuilder ( $options ); Tambi\u00e9n puedes crear tu propia versi\u00f3n, implementando BuilderInterface .","title":"Avanzado"}]}